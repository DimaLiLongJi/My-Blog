---
layout:     post
title:      "vue源码阅读-7.computed和watch"
subtitle:   "vue源码"
date:       2019-01-05
author:     "本人"
header-img: "img/2018/vue/vue.png"
tags:
    - vue源码阅读
---


## Vue 的监听

除了依赖收集时，收集到渲染模板上用到的 `data` 或 `props` 的属性，Vue 还支持了计算属性 `computed` 和侦听属性 `watch` 2 个选项。


## computed 计算属性

[Vue computed](https://cn.vuejs.org/v2/guide/computed.html#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7)

但是如果我们使用方法也能达到同样的目的，但是 方法在每次渲染页面的时候都会执行，会产生副作用。

而 `computed` 则会根据该属性的依赖来执行，只在相关依赖发生改变时它们才会重新求值。

初始化开始于 `initState`。**initProps => initMethods => initData => initComputed => initWatch**

> src/core/instance/init.js

```typescript
export function initState (vm: Component) {
  vm._watchers = []
  const opts = vm.$options
  if (opts.props) initProps(vm, opts.props)
  if (opts.methods) initMethods(vm, opts.methods)
  if (opts.data) {
    initData(vm)
  } else {
    observe(vm._data = {}, true /* asRootData */)
  }
  if (opts.computed) initComputed(vm, opts.computed)
  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch)
  }
}
```

### initComputed

> src/core/instance/state.js

```typescript
const computedWatcherOptions = { lazy: true }

function initComputed (vm: Component, computed: Object) {
  // $flow-disable-line
  const watchers = vm._computedWatchers = Object.create(null)
  // computed properties are just getters during SSR
  const isSSR = isServerRendering()

  for (const key in computed) {
    const userDef = computed[key]
    const getter = typeof userDef === 'function' ? userDef : userDef.get
    if (process.env.NODE_ENV !== 'production' && getter == null) {
      warn(
        `Getter is missing for computed property "${key}".`,
        vm
      )
    }

    if (!isSSR) {
      // create internal watcher for the computed property.
      watchers[key] = new Watcher(
        vm,
        getter || noop,
        noop,
        computedWatcherOptions
      )
    }

    // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.
    if (!(key in vm)) {
      defineComputed(vm, key, userDef)
    } else if (process.env.NODE_ENV !== 'production') {
      if (key in vm.$data) {
        warn(`The computed property "${key}" is already defined in data.`, vm)
      } else if (vm.$options.props && key in vm.$options.props) {
        warn(`The computed property "${key}" is already defined as a prop.`, vm)
      }
    }
  }
}
```

1. 函数首先创建 `vm._computedWatchers` 和 `watchers` 为一个没有原型的空对象
2. 接着对 `computed` 对象做遍历，拿到每个对应的函数赋值给 `userDef`
3. 如果不是服务端渲染的情况下，给 `watchers[key] = new Watcher()` 给每个属性创建出 `new Watcher()`。
4. `Watcher` 构造函数**第一个参数为组件实例，第二个为用户定义的方法watcher会调用`this.getter`(类似于 `vm._render`)。** 并把当前 `watcher` 推倒栈顶并触发 `getter`
5. `getter` 会触发function里面需要的属性的 `dep.depend()` ，继而触发 `Dep.target.addDep(this)` 让已经在栈顶的 `watcher` 关注新的依赖 `this.newDeps.push(dep)`
6. 然后已经在栈顶的 `watcher` 中的 `watcher.addDep(this)` 继续执行 `dep.addSub(this)`，让触发的 `getter` 的依赖 `dep` 执行 `this.subs.push(sub)`，把栈顶 `watcher` 放入订阅中
7. `computedWatcherOptions` computed watcher 默认就是 `lazy: true`，所以连带 `this.dirty = true`。 
8. 如果组件实例上不存在这个 `kye`，则调用 `defineComputed(vm, key, userDef)`
9. 否则则判断是否被 `data` 或 `prop` 占用了，如果是则发出警告

```
new Wachter => watcher.get => wathcer 到栈顶 `pushTarget(this)` => 执行 `watcher.getter()` 方法（render 或 computed fuction） => `watcher.getter()` 方法触发内部使用到的属性的 getter

=> 被使用到的属性的 getter 触发 `dep.depend()` => 属性 getter 触发 `Dep.target.addDep(this)` => 栈顶 wathcer 收集到 newDeps 并 `this.newDeps.push(dep)`

=> watcher 继续执行 `dep.addSub(this)` => 属性getter的 dep 收集起栈顶的 watcher `this.subs.push(sub)`

=> watcher 继续执行 `popTarget()` 出栈 => watcher 继续执行 `popTarget()` 出栈 => watcher 继续 `this.cleanupDeps()` 遍历移除不需要的 dep 并交换新旧 deps
```

### defineComputed

> src/core/instance/state.js

```typescript
const sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
}
export function defineComputed (
  target: any,
  key: string,
  userDef: Object | Function
) {
  const shouldCache = !isServerRendering()
  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = shouldCache
      ? createComputedGetter(key)
      : createGetterInvoker(userDef)
    sharedPropertyDefinition.set = noop
  } else {
    sharedPropertyDefinition.get = userDef.get
      ? shouldCache && userDef.cache !== false
        ? createComputedGetter(key)
        : createGetterInvoker(userDef.get)
      : noop
    sharedPropertyDefinition.set = userDef.set || noop
  }
  if (process.env.NODE_ENV !== 'production' &&
      sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function () {
      warn(
        `Computed property "${key}" was assigned to but it has no setter.`,
        this
      )
    }
  }
  Object.defineProperty(target, key, sharedPropertyDefinition)
}
```

主要是定义下 `vm[key]`。

1. `const shouldCache = !isServerRendering()` 服务端无需缓存，非服务端需要缓存
2. 生成 `getter` 和 `setter`。如果设置了 `set` 才会被定义 `setter`，否则都是空函数
3. `Object.defineProperty(target, key, sharedPropertyDefinition)` 然后把 vm[key] 代理过去

`getter` 定义的方法：

```typescript
createComputedGetter(key);

function createComputedGetter (key) {
  return function computedGetter () {
    const watcher = this._computedWatchers && this._computedWatchers[key]
    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate()
      }
      if (Dep.target) {
        watcher.depend()
      }
      return watcher.value
    }
  }
}
```

`createComputedGetter` 返回一个函数 `computedGetter`，它就是计算属性对应的 `getter`。（**`watcher.value` 就是 `this.value = this.lazy ? undefined : this.get()`**）

当 `getter` 被触发时，会执行 `watcher.evaluate()` 和 `watcher.depend()`。

### computed watcher

现在已经分析到了第二个 `Watcher` : `computed watcher`。

在 Watcher 初始化的时候，直接回 `vm._watchers.push(this)`。

而 `render` 的 `Watcher` 则要在 `$mount` 的最好才被 `new`。因此计算属性的监听要在组件的监听前被实例。

接下来看下计算属性的 `getter`

> src/core/instance/state.js

```typescript
createComputedGetter(key);

function createComputedGetter (key) {
  return function computedGetter () {
    const watcher = this._computedWatchers && this._computedWatchers[key]
    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate()
      }
      if (Dep.target) {
        watcher.depend()
      }
      return watcher.value
    }
  }
}
```

因为`lazy: true` => `this.dirty = this.lazy `，所以会触发 `watcher.evaluate()`

> src/core/observer/watcher.js

```typescript
/**
   * Evaluate the value of the watcher.
   * This only gets called for lazy watchers.
   */
  evaluate () {
    this.value = this.get()
    this.dirty = false
  }
```
`evaluate` 的逻辑非常简单

1. 判断 `this.dirty`，如果为 `true` 则通过 `this.get()` 求值
2. 然后把 `this.dirty` 设置为 `false`
3. 而 `this.get()` 在求值过程中，会执行 `value = this.getter.call(vm, vm)`
4. 这实际上就是执行了计算属性定义的 `getter` 函数，其实就是用户自己定义的带返回值的那个函数
5. **而当函数执行时，会用到定义好的响应式对象，又会触发它们的 `getter`，继而把自身持有的 `dep` 添加到当前正在计算的 `watcher` 中，这个时候 `Dep.target` 就是这个 `computed watcher`**
6. 一旦对计算属性依赖的数据做修改，则会触发 `setter` 过程，通知所有订阅它变化的 `watcher` 更新，执行 `watcher.update() `
7. 最后则会一起把计算属性给更新掉

对于计算属性这样的 `computed watcher`，它实际上是有 2 种模式，`lazy`（默认） 和 `active`。


## watch 侦听属性

[Vue watch](https://cn.vuejs.org/v2/guide/computed.html#%E4%BE%A6%E5%90%AC%E5%99%A8)

侦听属性的初始化也是发生在 Vue 的实例初始化阶段的 `initState` 函数中

**initProps => initMethods => initData => initComputed => initWatch**

> src/core/instance/init.js

```typescript
export function initState (vm: Component) {
  vm._watchers = []
  const opts = vm.$options
  if (opts.props) initProps(vm, opts.props)
  if (opts.methods) initMethods(vm, opts.methods)
  if (opts.data) {
    initData(vm)
  } else {
    observe(vm._data = {}, true /* asRootData */)
  }
  if (opts.computed) initComputed(vm, opts.computed)
  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch)
  }
}
```

### initWatch

> src/core/instance/state.js

```typescript
function initWatch (vm: Component, watch: Object) {
  for (const key in watch) {
    const handler = watch[key]
    if (Array.isArray(handler)) {
      for (let i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i])
      }
    } else {
      createWatcher(vm, key, handler)
    }
  }
}
```

这里就是对 `watch` 对象做遍历，拿到每一个 `handler`

因为 Vue 是支持 `watch` 的同一个 `key` 对应多个 `handler`，所以如果 `handler` 是一个数组，则遍历这个数组，调用 `createWatcher` 方法，否则直接调用` createWatcher`

```typescript
function createWatcher (
  vm: Component,
  expOrFn: string | Function,
  handler: any,
  options?: Object
) {
  if (isPlainObject(handler)) {
    options = handler
    handler = handler.handler
  }
  if (typeof handler === 'string') {
    handler = vm[handler]
  }
  return vm.$watch(expOrFn, handler, options)
}
```

`expOrFn` 是 `key`，`handler` 是 `handler.handler`，`options` 是 `handel`。（**尤雨溪啥神仙写法**）

这里的逻辑也很简单，首先对 `hanlder` 的类型做判断，拿到它最终的回调函数，最后调用 `vm.$watch(keyOrFn, handler, options)` 

### $watch 

`$watch` 是 Vue 原型上的方法，它是在执行 `stateMixin` 的时候定义的

> src/core/instance/state.js

```typescript
Vue.prototype.$watch = function (
  expOrFn: string | Function,
  cb: any,
  options?: Object
): Function {
  const vm: Component = this
  if (isPlainObject(cb)) {
    return createWatcher(vm, expOrFn, cb, options)
  }
  options = options || {}
  options.user = true
  const watcher = new Watcher(vm, expOrFn, cb, options)
  if (options.immediate) {
    try {
      cb.call(vm, watcher.value)
    } catch (error) {
      handleError(error, vm, `callback for immediate watcher "${watcher.expression}"`)
    }
  }
  return function unwatchFn () {
    watcher.teardown()
  }
}
```

1. `$watch` 方法首先判断 `cb` 如果是一个对象则调用 `createWatcher` 方法，这是因为 `$watch` 方法是用户可以直接调用的，它可以传递一个对象，也可以传递函数
2. 接着执行 `const watcher = new Watcher(vm, expOrFn, cb, options)` 实例化了一个 `watcher` 这里需要注意一点这是一个 **user watcher**，因为 `options.user = true`
3. 通过实例化 `watcher` 的方式，一旦 `watch` 的数据发送变化，它最终会执行 `watcher.run()` 方法，执行回调函数 `cb`，并且如果设置了 `immediate` 为 `true`，则直接会执行回调函数 `cb`
4. 最后返回了一个 `unwatchFn` 方法，它会调用 `watcher.teardown()` 方法去移除这个 `watcher`。

所以本质上侦听属性也是基于 `Watcher` 实现的，它是一个 `user watcher`。


## 各种 watcher

其实 `Watcher` 支持了不同的类型，下面梳理一下它有哪些类型以及它们的作用

> src/core/observer/watcher.js

```javascript
if (options) {
    this.deep = !!options.deep
    this.user = !!options.user
    this.lazy = !!options.lazy
    this.sync = !!options.sync
    this.before = options.before
} else {
    this.deep = this.user = this.lazy = this.sync = false
}
this.cb = cb
this.id = ++uid // uid for batching
this.active = true
this.dirty = this.lazy // for lazy watchers
```

### deep watcher

user watcher 中定义的 `deep`，可以遍历对象内部属性，达到深层监听

```javascript
 /**
   * Evaluate the getter, and re-collect dependencies.
   */
  get () {
    pushTarget(this)
    let value
    const vm = this.vm
    ......
      // "touch" every property so they are all tracked as
      // dependencies for deep watching
      if (this.deep) {
        traverse(value)
      }
    ......
  }
```

> src/core/observer/traverse.js

```typescript
const seenObjects = new Set()
/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */
export function traverse (val: any) {
  _traverse(val, seenObjects)
  seenObjects.clear()
}

function _traverse (val: any, seen: SimpleSet) {
  let i, keys
  const isA = Array.isArray(val)
  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {
    return
  }
  if (val.__ob__) {
    const depId = val.__ob__.dep.id
    if (seen.has(depId)) {
      return
    }
    seen.add(depId)
  }
  if (isA) {
    i = val.length
    while (i--) _traverse(val[i], seen)
  } else {
    keys = Object.keys(val)
    i = keys.length
    while (i--) _traverse(val[keys[i]], seen)
  }
}
```

`traverse` 的逻辑也很简单，它实际上就是对一个对象做深层递归遍历。

因为遍历过程中就是对一个子对象的访问，会触发它们的 `getter` 过程，这样就可以收集到依赖，也就是订阅它们变化的 `watcher`。

这个函数实现还有一个小的优化，遍历过程中会把子响应式对象通过它们的 `dep id` 记录到 `seenObjects`，避免以后重复访问。

### computed watcher(lazy watcher)

computed watcher 的 `lazy` 为 `true`

> src/core/observer/watcher.js

```javascript
if (options) {
    this.deep = !!options.deep
    this.user = !!options.user
    this.lazy = !!options.lazy
    this.sync = !!options.sync
    this.before = options.before
} else {
    this.deep = this.user = this.lazy = this.sync = false
    }
this.cb = cb
this.id = ++uid // uid for batching
this.active = true
this.dirty = this.lazy // for lazy watchers

update () {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true
  } else if (this.sync) {
    this.run()
  } else {
    queueWatcher(this)
  }
}
```


### user watcher

通过 `vm.$watch` 创建的 `watcher` 是一个 user watcher，其实它的功能很简单，在对 `watcher` **求值时会执行回调函数**，并且会处理一下错误

> src/core/observer/watcher.js

```javascript
run () {
  ......
  if (this.user) {
    try {
      this.cb.call(this.vm, value, oldValue)
    } catch (e) {
      handleError(e, this.vm, `callback for watcher "${this.expression}"`)
    }
  } else {
    this.cb.call(this.vm, value, oldValue)
  }
  ......
}
```


## 总结

对计算属性和侦听属性的实现有了深入的了解，

计算属性本质上是 `computed watcher`(lazy watcher)，而侦听属性本质上是 `user watcher`。

**而 Vue 的 `computed` 实际上是属性的 `getter` 并被平行的 `computed watcher` 所订阅，而 `watch` 则是属性的 `setter` 更新时调用的回调函数。**

就应用场景而言，计算属性适合用在模板渲染中，某个值是依赖了其它的响应式对象甚至是计算属性计算而来；

而侦听属性适用于观测某个值的变化去完成一段复杂的业务逻辑。

![vue 响应式](/my-blog/img/2018/vue/vue-reactive.png)
