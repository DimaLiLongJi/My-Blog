---
layout:     post
title:      "数据库-1.redis介绍"
subtitle:   "redis"
date:       2019-05-10
author:     "本人"
header-img: "img/2019/summary/js.jpeg"
tags:
    - 数据库
---


## redis

Redis本质上是**一个 Key-Value 类型的内存数据库**，整个数据库统统加载在内存当中进行操作，定期通过**异步操作把数据库数据flush到硬盘上进行保存**。

因为是纯内存操作，Redis的性能非常出色，每秒可以处理超过 **10万次读写操作**，是已知性能最快的Key-Value DB。

Redis的出色之处不仅仅是性能，Redis最大的魅力是支持保存多种数据结构。

**此外单个value的最大限制是1GB。**

比方说用他的List来做FIFO双向链表，实现一个轻量级的高性 能消息队列服务，用他的Set可以做高性能的tag系统等等。

另外Redis也可以对存入的Key-Value设置expire时间，因此也可以被当作一 个功能加强版的memcached来用。

Redis的主要缺点是数据库容量受到物理内存的限制，不能用作海量数据的高性能读写，因此Redis适合的场景主要局限在较小数据量的高性能操作和运算上。


## 适用场景

1. 会话缓存（Session Cache）

最常用的一种使用Redis的情景是会话缓存（session cache）。用Redis缓存会话比其他存储（如Memcached）的优势在于：Redis提供持久化。


2. 全页缓存（FPC）

除基本的会话token之外，Redis还提供很简便的FPC平台。回到一致性问题，即使重启了Redis实例，因为有磁盘的持久化，用户也不会看到页面加载速度的下降，这是一个极大改进，类似PHP本地FPC。

3. 队列

Reids在内存存储引擎领域的一大优点是提供 `list` 和 `set` 操作，这使得Redis能作为一个很好的消息队列平台来使用。

Redis作为队列使用的操作，就类似于本地程序语言对 `list` 的 `push/pop` 操作。


4. 排行榜/计数器

Redis在内存中对数字进行递增或递减的操作实现的非常好。集合（Set）和有序集合（Sorted Set）也使得我们在执行这些操作的时候变的非常简单，Redis只是正好提供了这两种数据结构。

所以，我们要从排序集合中获取到排名最靠前的10个用户–我们称之为“user_scores”，我们只需要像下面一样执行即可：

当然，这是假定你是根据你用户的分数做递增的排序。如果你想返回用户及用户的分数，你需要这样执行：

```
ZRANGE user_scores 0 10 WITHSCORES
```

5. 发布/订阅

最后（但肯定不是最不重要的）是Redis的发布/订阅功能。


## redis 的数据类型

redis 一共支持5中数据类型：String, List, Set, Sorted Set, Hash。

1. String

这个其实没什么好说的，最常规的Set/Get操作，Value可以是String也可以是数字，一般做一些复杂的计数功能的缓存。

2. List

使用List的数据结构，可以做简单的消息队列的功能。另外还有一个就是，可以利用Lrange命令，做基于Redis的分页功能，性能极佳，用户体验好。

3. Set

因为Set堆放的是一堆不重复值的集合，所以可以做全局去重的功能。

另外，就是利用交集、并集、差集等操作，可以计算共同喜好、全部的喜好、自己独有的喜好等功能。


4. Sorted Set

Sorted Set多了一个权重参数Score，集合中的元素能够按Score进行排列。

可以做排行榜应用，取TOP N操作。

另外，Sorted Set还可以用来做延时任务。

最后一个应用就是可以做范围查找。

6. Hash

这里Value存放的是结构化的对象，比较方便的就是操作其中的某个字段。

做单点登录的时候，就是用这种数据结构存储用户信息，以CookieId作为Key，设置30分钟为缓存过期时间，能很好地模拟出类似Session的效果。


## 过期策略

redis 的过期策略分为2种：定期删除 + 惰性删除

1. 定时删除：用一个定时器来负责监视Key，过期则自动删除。虽然内存及时释放，但是十分消耗CPU资源。在大并发请求下，CPU要将时间应用在处理请求，而不是删除Key
2. 惰性删除：Redis默认每个100ms检查是否有过期的Key，有过期Key则删除。**需要说明的是，Redis不是每个100ms将所有的Key检查一次，而是随机抽取进行检查**

于是，惰性删除派上用场。也就是说在你获取某个Key的时候，Redis会检查一下，这个Key如果设置了过期时间，那么是否过期了？如果过期了此时就会删除。

**但是采用定期删除+惰性删除就没其他问题了么？**

不是的，如果定期删除没删除Key。然后你也没及时去请求Key，也就是说惰性删除也没生效。

这样，Redis的内存会越来越高，那么就应该采用内存淘汰机制。


## 内存淘汰

在Redis.conf中有一行配置：

```
maxmemory-policy volatile-lru
```

`maxmemory-policy` 就是配置内存淘汰策略的

1. `noeviction`：当内存不足以容纳新写入数据时，新写入操作会报错。应该没人使用吧；
2. `allkeys-lru`：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的Key。推荐使用，目前项目在用这种；
3. `allkeys-random`：当内存不足以容纳新写入数据时，在键空间中，随机移除某个key，应该也没人使用吧；
4. `volatile-lru`：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，移除最近最少使用的Key。这种情况一般是把Redis既当缓存又做持久化存储的时候才用。不推荐；
5. `volatile-random`：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，随机移除某个Key。依然不推荐；
6. `volatile-ttl`：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，有更早过期时间的Key优先移除。不推荐。

**如果没有设置Expire的Key，不满足先决条件（Prerequisites）；那么Volatile-lru、Volatile-random和Volatile-ttl策略的行为，和Noeviction（不删除）基本上一致。**


## 持久化

redis 提供了 RDB 和 AOF 两种持久化方案：

1. RDB：生成指定时间间隔内的 redis 内存中数据快照，是一个二进制文件 `dumpr.rdb` **内存快照**
2. AOF：记录 redis 除了查询以外的所有写命令，并在 redis 服务启动时，通过重新执行这些命令来还原数据 **日志模式**

- RDB 持久化

1. 当 Redis 需要做持久化时，Redis 会 `fork` 一个子进程，子进程将数据写到磁盘上一个临时 `rdb` 文件中。
2. 当子进程完成写临时文件后，将原来的 `rdb` 替换掉，这样的好处就是可以 `copy-on-write`。
3. 当然我们也可以手动执行 `save` 或者 `bgsave`（异步）生成 `rdb` 文件。

redis.conf 默认配置

```
save 900 1 // 900秒之内，如果超过1个key被修改，则发起快照保存
save 300 10 // 300秒之内，如果超过10个key被修改，则发起快照保存
save 60 10000 // 60秒之内，如果1万个key被修改，则发起快照保存
```

优点：RDB 是一个比较紧凑的文件，它保存了 redis 在某个时间点的数据，这种数据比较适合做备份和用于灾难恢复。

缺点：在这种情况下， 一旦发生故障停机， 你就可能会丢失好几分钟的数据

- AOF 持久化

使用 AOF 做持久化，每一个写命令都通过 `write` 函数追加到 `appendonly.aof` 文件中。

其实我觉得更像是日志模式。

AOF 记录日志的步骤：

1. AOF 就可以做到全程持久化，只需要在配置文件中开启（默认是 `no` ）
2. `appendfsync yes` 开启 AOF 之后，Redis 每执行一个修改数据的命令，都会把它添加到 AOF 文件中
3. 当 Redis 重启时，将会读取 AOF 文件进行“重放”以恢复到 Redis 关闭前的最后时刻。

以下是 AOF 重写的执行步骤：

1. Redis 执行 `fork()` ，现在同时拥有父进程和子进程。
2. 子进程开始将新 AOF 文件的内容写入到临时文件。
3. 对于所有新执行的写入命令，**父进程一边将它们累积到一个内存缓存中**，**一边将这些改动追加到现有 AOF 文件的末尾**： 这样即使在重写的中途发生停机，现有的 AOF 文件也还是安全的。
4. 当子进程完成重写工作时，它给父进程发送一个信号，父进程在接收到信号之后，将内存缓存中的所有数据追加到新 AOF 文件的末尾。
5. 搞定！现在 Redis 原子地用新文件替换旧文件，之后所有命令都会直接追加到新 AOF 文件的末尾。

edis.conf 默认配置

```
appendfsync yes // 开启
appendfsync always // 每次有数据修改发生时都会写入AOF文件。
appendfsync everysec // 每秒钟同步一次，该策略为AOF的缺省策略。
```

优点：

1. 使用 AOF 做持久化，可以设置不同的 fsync 策略，比如无 fsync ，每秒钟一次 fsync ，或者每次执行写入命令时 fsync
2. AOF 文件是一个只进行追加操作的日志文件，不是生成新的之后替换掉那种，即使日志因为某些原因而包含了未写入完整的命令（比如写入时磁盘已满，写入中途停机，等等）， redis-check-aof 工具也可以轻易地修复这种问题
3. **Redis 可以在 AOF 文件体积变得过大时，自动地在后台对 AOF 进行重写**： 重写后的新 AOF 文件包含了恢复当前数据集所需的最小命令集合
4. AOF 文件有序地保存了对数据库执行的所有写入操作

缺点：AOF 文件的体积通常要大于 RDB 文件的体积


## 事务

事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。

`MULTI` 、 `EXEC` 、 `DISCARD` 和 `WATCH` 是 Redis 事务的基础。

事务可以一次执行多个命令， 并且带有以下两个重要的保证：

1. 事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。
2. 事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。EXEC 命令负责触发并执行事务中的所有命令。

- 用法：

1. `MULTI`：命令用于开启一个事务，它总是返回 OK，并将命令放到队列中
2. `EXEC`：命令开始按照顺序执行队列中的命令，回复是一个数组
3. `DISCARD`：客户端可以清空事务队列， 并放弃执行事务
4. `WATCH`：监听一个健，`EXEC` 只有在被监听的键值未被更改才能执行队列中的命令。命令可以为 Redis 事务提供 `check-and-set （CAS）` 行为

```
> MULTI
OK

> INCR foo
QUEUED

> INCR bar
QUEUED

> EXEC
1) (integer) 1
2) (integer) 1
```

**redis 事务不支持回滚**


