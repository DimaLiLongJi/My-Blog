---
layout:     post
title:      "angular-1.zoneJS"
subtitle:   "zonejs"
date:       2019-03-16
author:     "本人"
header-img: "img/2019/03/angular.png"
tags:
    - Angular
---



## ZoneJS

在 `Angular2+` 中，当异步任务完成后不在需要像 AngularJS 一样主动调用 `$scope.$apply` 或` $scope.$digest` 来通知框架更新视图，Angular 会自动替我们处理好这一切，在这种便利的背后 `zone.js` 功不可没。

用官方的描述来说，zone.js 是描述 JavaScript 执行过程的上下文，它是一个跨异步任务依然存在的上下文，有点类似于TLS（thread-local storage: 线程本地存储）技术， zone.js 则是将 TLS 引入到 JavaScript 语言中的实现框架。

简单来讲 `zone.js` 对异步任务进行了封装，并且提供了异步执行时的 `Hook` 接口，方便开发者在异步任务执行前后做一些额外的事情，比如：记录日志，监控性能，附加数据到异步上下文中等.

一个例子:

```typescript
import 'zone.js';

Zone.current.fork({
    name: 'printAsyncTime',
    onInvokeTask(parentDelegate: ZoneDelegate, currentZone: Zone, targetZone: Zone, task: Task, applyThis: any, applyArgs: any[]) {
        let startTime = performance.now(),
            result = parentDelegate.invokeTask(targetZone, task, applyThis, applyArgs);
        console.log(`${task.source} 耗时 ${performance.now() - startTime}ms `, task.data);
        return result;
    }
}).run(Main)

function Main() {
    setTimeout(function whenTimeout() {
        let i = 0;
        while ((i++) < 999999999) { }
    });

    document.addEventListener('click', function whenDocumentClick() {
        let i = 0;
        while ((i++) < 88888888) { }
    });
}
```

输出：

```
=> setTimeout 耗时 749.48ms
// 当点击页面后输出
=> HTMLDocument.addEventListener:click 耗时 55.73000000000002ms
```


## Zone

`Zone` 是一个类，`current` 是 `Zone` 类的一个静态 `Getter`，他会返回当前运行环境在哪个 `Zone` 对象下

在不同的上下文`zone.js` 会自动切换到不同 `Zone` 对象保证每次调用 `Zone.current` 都能够正确获得与当前上下文关联的 `Zone` 对象

默认全局代码处于一个名为 `<root>` 的zone上下文，所以这里的 `Zone.current` 得到的是这个` <root> zone`。

### fork方法

`fork` 是 `Zone` 对象的一个方法，它返回一个继承自调用方的全新 `Zone` 对象：

![zone.fork](/my-blog/img/2019/03/zone.fork.png)

在 `fork` 的参数中提供了一些 `Hook` 操作选项，例如当前例子中的 `onInvokeTask`，同时还有一个必填项 `name` 属性为返回 `Zone` 对象的名称，这个主要是便于调试。

### run 方法

`run` 也是 `Zone` 对象的一个方法，它的作用是在当前 `Zone` 上下文中执行一段代码，在此案例中是在 `new Zone()` 的上下文中执行 `main` 函数。

当执行 `main` 函数的时候，两个异步函数的回调被封装成了两个 `Task` ，在正确的时机会被执行。

在当前案例中，因为设置了异步调用时的 `Hook(onInvokeTask)` 所以 `zone.js` 会直接将异步任务交给设置的 `Hook` 函数处理。

传给 `onInvokeTask` Hook 函数的参数有：

1. `parentZoneDelegate: ZoneDelegate` 父级 `Zone` 代理对象
2. `currentZone: Zone` 当前 `Zone` 对象
3. `targetZone: Zone` 生成这个异步任务的 `Zone` 对象
4. `task: Task` 异步任务对象
5. `applyThis: any` 异步任务的 `this`
6. `applyArgs?: any[]` 异步任务的参数

#### parentZoneDelegate

`parentZoneDelegate` 是 `ZoneDelegate` 类的实例。

`ZoneDelegate` 类是 `Zone` 类的一个辅助类，它的核心功能就是检查调用 `fork` 方法时传入的参数有没有设置某个操作的Hook函数，

如果有则直接调用该 `Hook`，如果没有就调用 `zone.js` 默认的操作。

这是 ZoneDelegate 的 invokeTask 方法的核心代码：

```typescript
this._invokeTaskZS ?
            this._invokeTaskZS.onInvokeTask(
                this._invokeTaskDlgt, this.zone, targetZone, task, applyThis, applyArgs) :
            task.callback.apply(applyThis, applyArgs);
```

`this._invokeTaskZS` 是调用 `fork` 方法时传入的参数，`ZoneDlegate` 的构造函数做了一些处理，如果传入的对象没有  `onInvokeTask` 这个属性那么 `this._invokeTaskZS` 为 `null`。

`task.callback` 是异步的回调函数，例如上面代码中的的 `setTimeout` , `DocumentClick` 函数。

可见，如果没有设置 `onInvokeTask` Hook 的话，`zone.js` 在异步操作被触发直接执行了回调函数。

**`onInvokeTask` 其实是执行回调函数的一个钩子**

#### currentZone targetZone

`currentZone` 是当前 Hook 函数所在的 `Zone` 对象

`targetZone` 是触发异步时的 `Zone` 对象

因为 `zone.js` 会沿着整个 `fork` 链查询 Hook 函数，所以**触发异步时 `Zone` 对象有可能不是当前 `Hook` 函数所在的 `Zone` 对象**，这里需要区分一下。

![zone.fork2](/my-blog/img/2019/03/zone.fork2.png)

#### task

`task` 异步任务对象，对于开发者而言仅需要关注它的四个属性：

1. `callback` 异步任务的回调
2. `data` 存放异步任务的一些数据
3. `type` 异步任务的类型
4. `source` 异步任务是被那个异步函数启动的，如 setTimeout , addEventListener

`type` 属性，在 `zone.js` 中异步任务被划分成三种：

1. `microTask` 微任务 `script（整体代码）, setTimeout, setInterval, setImmediate, I/O, UI rendering`
2. `macroTask` 宏任务 `process.nextTick, Promises（这里指浏览器实现的原生 Promise）,Object.observe, MutationObserver`
3. `eventTask` 事件监听器

其中 `eventTask` 指的是事件监听器产生的异步任务，`microTask` 和 `macroTask` 和JS引擎中的 `microTask macroTask` 保持一致。

`macrotask` 和 `microtask` 两个概念，这表示异步任务的两种分类。

在挂起异步任务时，JS 引擎会将所有任务按照类别分到这两个队列中

1. 首先在 `macrotask` 的队列（这个队列也被叫做 `task queue`）中取出第一个任务，执行完毕后取出 microtask 队列中的所有任务顺序执行
2. 之后再取 `macrotask` 任务，周而复始，直至两个队列的任务都取完，算作任务队列清空

因为我们只需要输出异步的执行时间，所以就只记录了下异步触发的时间，然后就交给父级 `parentZoneDelegate` 对象处理了，等父级处理完毕，再把当前时间和刚才记录的时间做一下减法就可以大概知道这个异步任务消耗了多少时间了。

这里用到了大概这个词，因为 `parentZoneDelegate` 的一些操作也会耗费一些时间，虽然不多，但这里也不是完全精准的异步任务耗时。


## 背后的原理

zone.js `Hook` 了浏览器上全部的异步操作函数(Node.js版则Hook了Node.js的全部异步操作函数)

例如： `setTimeout` , `setInterval` ， `Promise` 等等

然后在它的Hook 函数内创建并调用了异步对象，因为 `zone.js` 的源代码太过繁杂不利于描述流程，这里用伪代码简单描述一下 `zone.js` 是如何Hook `setTimeout`的：

```typescript
let _setTimeout = window.setTimeout;
let _clearTimeout = window.clearTimeout;

(window as any).setTimeout = function (...args: any[]) {
    // 异步回调函数
    let fn = args[0], task = new Task(fn);
    task.id = _setTimeout(function () {
        task.invoke();
    });
    return task;
};

(window as any).clearTimeout = function (task) {
    _clearTimeout(task.id);
}


// 伪 Task 对象
class Task {
    public callback: Function = null;
    public id: number = -1;
    public constructor(callback: Function) {
        this.callback = callback;
    }
    public invoke() {
        
        // 使用 current zone 的 runTask 来执行这个 task
        // 如果整个 zone.fork 链上有 onInvokeTask 的话
        // 该操作会将task对象传递给 onInvokeTask 处理 
        Zone.current.runTask(this);
    }
}
```

1. 暴力替换全部异步函数
2. 用于换掉的方法中使用 `Task` 并通过 `task.invoke` 来触发任务
3. `Task` 实例 使用 `Zone.current.runTask` 来执行这个 `task`
