---
layout:     post
title:      "基础总结-5.垃圾回收"
subtitle:   "js 基础总结"
date:       2019-02-08
author:     "本人"
header-img: "img/2019/summary/js.jpeg"
tags:
    - 基础总结
---


## 垃圾回收


V8 实现了准确式 GC，GC 算法采用了分代式垃圾回收机制。因此，V8 将内存（堆）分为新生代和老生代两部分。

### 新生代

新生代中的对象一般存活时间较短，使用 Scavenge GC 算法。

在新生代空间中，内存空间分为两部分，分别为 From 空间和 To 空间。

在这两个空间中，必定有一个空间是使用的，另一个空间是空闲的。

新分配的对象会被放入 From 空间中，当 From 空间被占满时，新生代 GC 就会启动了。

算法会检查 From 空间中存活的对象并复制到 To 空间中，如果有失活的对象就会销毁。

当复制完成后将 From 空间和 To 空间互换，这样 GC 就结束了。

### 老生代

老生代中的对象一般存活时间较长且数量也多，使用了两个算法，分别是标记清除算法和标记压缩算法。

在讲算法前，先来说下什么情况下对象会出现在老生代空间中：

1. 新生代中的对象是否已经经历过一次 Scavenge 算法，如果经历过的话，会将对象从新生代空间移到老生代空间中。
2. To 空间的对象占比大小超过 25 %。在这种情况下，为了不影响到内存分配，会将对象从新生代空间移到老生代空间中。

老生代中的空间很复杂，有如下几个空间

``` java
enum AllocationSpace {
  // TODO(v8:7464): Actually map this space's memory as read-only.
  RO_SPACE,    // 不变的对象空间
  NEW_SPACE,   // 新生代用于 GC 复制算法的空间
  OLD_SPACE,   // 老生代常驻对象空间
  CODE_SPACE,  // 老生代代码对象空间
  MAP_SPACE,   // 老生代 map 对象
  LO_SPACE,    // 老生代大空间对象
  NEW_LO_SPACE,  // 新生代大空间对象

  FIRST_SPACE = RO_SPACE,
  LAST_SPACE = NEW_LO_SPACE,
  FIRST_GROWABLE_PAGED_SPACE = OLD_SPACE,
  LAST_GROWABLE_PAGED_SPACE = MAP_SPACE
};
```

在老生代中，以下情况会先启动标记清除算法：

1. 某一个空间没有分块的时候
2. 空间中被对象超过一定限制
3. 空间不能保证新生代中的对象移动到老生代中

在这个阶段中，会遍历堆中所有的对象，然后标记活的对象，在标记完成后，销毁所有没有被标记的对象。

在标记大型对内存时，可能需要几百毫秒才能完成一次标记。

这就会导致一些性能上的问题。

为了解决这个问题，2011 年，V8 从 stop-the-world 标记切换到增量标志。

在增量标记期间，GC 将标记工作分解为更小的模块，可以让 JS 应用逻辑在模块间隙执行一会，从而不至于让应用出现停顿情况。

但在 2018 年，GC 技术又有了一个重大突破，这项技术名为并发标记。该技术可以让 GC 扫描和标记对象时，同时允许 JS 运行。

清除对象后会造成**堆内存出现碎片**的情况，当碎片超过一定限制后会启动压缩算法。

**在压缩过程中，将活的对象像一端移动，直到所有对象都移动完成然后清理掉不需要的内存。**


## 内存泄露

内存泄露指变量无法被垃圾回收，一直存在于内存之中。

一般造成内存泄露的原因有下面4点：

### 闭包

js引擎的**逃逸分析**会分析闭包所使用的变量，将闭包所引用的变量存在内存中，从而避免在闭包函数调用时，变量被垃圾回收。

```javascript
function parentFn() {
  const a = 1;
  const b = 2;
  return function() {
    console.log(b);
  }
}
const childFn = parentFn();
childFn(); // 2
```

上书例子中，`parentFn` 中的 `b` 就会被js引擎给存下，而 `a` 则因为逃逸分析失败在函数执行完后被清理。

### 意外的全局变量

在**非严格模式**中，函数中不使用关键字声明的变量，无论是否有闭包引用，都会被提升到全局变量。

```javascript
function parentFn() {
  a = 1;
}
parentFn();
console.log(a); // 1
```

### 未清理的定时器

很容易理解，计时器如果不清理，任务将一直执行。

计时器中引用的变量也无法被垃圾回收。

```javascript
var someResource = getData();
setInterval(function() {
    var node = document.getElementById('Node');
    if(node) {
        node.innerHTML = JSON.stringify(someResource));
    }
}, 1000);
```

### 为清理的DOM引用

```javascript
var elements = {
    button: document.getElementById('button'),
    image: document.getElementById('image'),
    text: document.getElementById('text')
};
function doStuff() {
    image.src = 'http://some.url/image';
    button.click();
    console.log(text.innerHTML);
}
doStuff();
function removeButton() {
    document.body.removeChild(document.getElementById('button'));
}
removeButton()
```

当执行 `removeButton()` 之后，HTML 中已经没有 `#button`，但该 DOM 也无法消失，因为引用仍被 `elements` 所持有。
