---
layout:     post
title:      "数据结构-1.线性结构"
subtitle:   "数据结构学习"
date:       2019-02-23
author:     "本人"
header-img: "img/2019/summary/js.jpeg"
tags:
    - 数据结构
---


## 栈

栈是一个线性结构，在计算机中是一个相当常见的数据结构。

栈的特点是只能在某一端添加或删除数据，遵循先进后出（FILO）的原则。

![栈](/my-blog/img/2019/02/栈.jpg)

### 实现一个栈

其实可以把栈看成是数组的一个子集，所以这里使用数组来实现。

栈一般都五种操作：

1. push 入栈
2. pop 出栈
3. peek 返回栈尾
4. getCount 获取栈长度
5. isEmpty 栈是否为空

```javascript
class Stack {
  constructor() {
    this.stack = [];
  }
  push(item) {
    this.stack.push(item);
  }
  pop() {
    this.stack.pop(); // 删除最后一项
  }
  peek() {
    return this.stack[this.getCount() - 1];
  }
  getCount() {
    return this.stack.length;
  }
  isEmpty() {
    return this.getCount() === 0;
  }
}
```


## 队列

队列一个线性结构，特点是在某一端添加数据，在另一端删除数据，遵循先进先出（FIFO）的原则。

![队列](/my-blog/img/2019/02/队列.png)

队列是典型的 FIFO 数据结构。

插入（insert）操作也称作入队（enqueue），新元素始终被添加在队列的末尾。 

删除（delete）操作也被称为出队（dequeue)。 你只能移除第一个元素。

### 实现一个队列

队列应支持两种操作：

- enqueue 入队：入队会向队列追加一个新元素
- dequeue 出队：会删除第一个元素

所以我们需要一个索引来指出起点。

### 单链队列

```javascript
class Queue {
  constructor(length) {
    this.queue = new Array(length + 1);
  }
  enQueue(item) {
    this.queue.push(item);
  }
  deQueue() {
    return this.queue.shift();
  }
  getHeader() {
    return this.queue[0];
  }
  getLength() {
    return this.queue.length;
  }
  isEmpty() {
    return this.getLength() === 0;
  }
}
```

上面的实现很简单，但在某些情况下效率很低。

随着起始指针的移动，浪费了越来越多的空间。

当我们有空间限制时，这将是难以接受的。

### 循环队列

更有效的方法是使用循环队列。 

具体来说，我们可以使用固定大小的数组和两个指针来指示起始位置和结束位置。 

目的是重用我们之前提到的被浪费的存储。

![循环队列](/my-blog/img/2019/02/循环队列.png)

1. 可扩容的循环队列

```javascript
class CircularQueue {
  constructor(length) {
    this.queue = new Array(length + 1);
    // 队头
    this.first = 0;
    // 队尾
    this.last = 0;
    // 当前队列大小
    this.size = 0;
  }
  enQueue(item) {
    // 判断队尾 + 1 是否为队头
    // 如果是就代表需要扩容数组
    // % this.queue.length 是为了防止数组越界
    if (this.first === (this.last + 1) % this.queue.length) {
      this.resize(this.getLength() * 2 + 1);
    }
    this.queue[this.last] = item;
    this.size++;
    // a % b => 当a<b时余数为a
    this.last = (this.last + 1) % this.queue.length;
  }
  deQueue() {
    if (this.isEmpty()) {
      throw Error('Queue is empty');
    }
    let r = this.queue[this.first];
    this.queue[this.first] = null;
    this.first = (this.first + 1) % this.queue.length;
    this.size--;
    // 判断当前队列大小是否过小
    // 为了保证不浪费空间，在队列空间等于总长度四分之一时
    // 且不为 2 时缩小总长度为当前的一半
    if (this.size === this.getLength() / 4 && this.getLength() / 2 !== 0) {
      this.resize(this.getLength() / 2);
    }
    return r;
  }
  getHeader() {
    if (this.isEmpty()) {
      throw Error('Queue is empty');
    }
    return this.queue[this.first];
  }
  getLength() {
    return this.queue.length - 1;
  }
  isEmpty() {
    return this.first === this.last;
  }
  resize(length) {
    let q = new Array(length);
    for (let i = 0; i < length; i++) {
      q[i] = this.queue[(i + this.first) % this.queue.length];
    }
    this.queue = q;
    this.first = 0;
    this.last = this.size;
  }
}
```

2. 不可扩容的循环队列

```typescript
class CircularQueue {
  queue: any[];
  size: number = 0;
  head: number = -1;
  tail: number = -1;

  constructor(length: number) {
    this.queue = new Array(length);
  }

  enQueue(value: any): boolean {
    if (this.isFull()) return false;
    if (this.isEmpty()) this.head = 0;
    this.tail = (this.tail + 1) % this.queue.length;
    this.queue[this.tail] = value;
    this.size ++;
    return true;
  }

  deQueue(): boolean {
    if (this.isEmpty()) return false;
    this.queue[this.head] = undefined;
    if (this.head === this.tail) {
      this.head = -1;
      this.tail = -1;
      this.size --;
      return true;
    }
    this.head = (this.head + 1) % this.queue.length;
    this.size --;
    return true;
  }

  Front(): any {
    return this.isEmpty() ? -1 : this.queue[this.head];
  }

  Rear(): any {
    return this.isEmpty() ? -1 : this.queue[this.tail];
  }

  isEmpty(): boolean {
    return !this.size;
  }

  isFull(): boolean {
    return this.size === this.queue.length;
  }
}
```


## 链表

链表是一个线性结构，同时也是一个天然的递归结构。

链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。

但是链表失去了数组随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大。

### 单向链表

![单向链表](/my-blog/img/2019/02/单向链表.png)

单向链表（单链表）是链表的一种，其特点是链表的链接方向是单向的，对链表的访问要通过顺序读取从头部开始。

链表是使用指针进行构造的列表，又称为结点列表，因为链表是由一个个结点组装起来的。

其中每个结点都有指针成员变量指向列表中的下一个结点。

列表是由结点构成，head指针指向第一个成为表头结点，而终止于最后一个指向NULL的指针。

#### 实现一个单向链表

插入指定 `index` 时要递归查找指针，如果查找到为 `index` 的 节点，则要将该节点的 `next` 指针指向插入节点，插入节点的指针指向找到的节点的 `next` 直接后继。

```javascript
// value 为值
// next 为下一节点的指针
class ListNode {
  constructor(v, next) {
    this.value = v;
    this.next = next;
  }
}

class LinkList {
  constructor() {
    // 链表长度
    this.size = 0;
    // 虚拟头部
    this.dummyNode = new ListNode(null, null);
  }
  find(header, index, currentIndex) {
    // 递归查找如果 index与递归到的index相同，则返回next
    // 如果不同，则按照next指针找到下一个节点
    if (index === currentIndex) return header;
    return this.find(header.next, index, currentIndex + 1);
  }
  addNode(v, index) {
    this.checkIndex(index);
    // 当往链表末尾插入时，prev.next 为空
    // 其他情况时，因为要插入节点，所以插入的节点
    // 的 next 应该是 prev.next
    // 然后设置 prev.next 为插入的节点
    let prev = this.find(this.dummyNode, index, 0);
    prev.next = new ListNode(v, prev.next);
    this.size++;
    return prev.next;
  }
  insertNode(v, index) {
    return this.addNode(v, index);
  }
  addToFirst(v) {
    return this.addNode(v, 0);
  }
  addToLast(v) {
    return this.addNode(v, this.size);
  }
  removeNode(index, isLast) {
    this.checkIndex(index);
    index = isLast ? index - 1 : index;
    let prev = this.find(this.dummyNode, index, 0)
    let node = prev.next;
    prev.next = node.next;
    node.next = null;
    this.size--;
    return node;
  }
  removeFirstNode() {
    return this.removeNode(0);
  }
  removeLastNode() {
    return this.removeNode(this.size, true);
  }
  checkIndex(index) {
    if (index < 0 || index > this.size) throw Error('Index error');
  }
  getNode(index) {
    this.checkIndex(index);
    if (this.isEmpty()) return;
    return this.find(this.dummyNode, index, 0).next;
  }
  isEmpty() {
    return this.size === 0;
  }
  getSize() {
    return this.size;
  }
}
```

### 双向链表

![双向链表](/my-blog/img/2019/02/双向链表.jpg)

双向链表也叫双链表，是链表的一种，它的每个数据结点中都有两个指针，分别指向直接后继和直接前驱。

所以，从双向链表中的任意一个结点开始，都可以很方便地访问它的前驱结点和后继结点。

一般我们都构造双向循环链表。

#### 实现一个双向链表

```javascript
// value 为值
// next 直接后继 为下一节点的指针
// prev 直接前驱 为上一节点的指针
class ListNode {
  constructor(v, next, prev) {
    this.value = v;
    this.next = next;
    this.prev = prev;
  }
}

class LinkList {
  constructor() {
    // 链表长度
    this.size = 0;
    // 虚拟头部
    this.dummyNode = new ListNode(null, null, null);
  }
  find(header, index, currentIndex) {
    // 递归查找如果 index与递归到的index相同，则返回next
    // 如果不同，则按照next指针找到下一个节点
    if (index === currentIndex) return header;
    return this.find(header.next, index, currentIndex + 1);
  }
  addNode(v, index) {
    this.checkIndex(index);
    // 当往链表末尾插入时，prev.next 为空
    // 其他情况时，因为要插入节点，所以插入的节点
    // 的 next 应该是 prev.next
    // 然后设置 prev.next 为插入的节点
    // 然后设置 prev.prev 的 prev 为插入的节点
    let prevNode = this.find(this.dummyNode, index, 0);
    const prevNextNode = prevNode.next;
    const insertNode = new ListNode(v, prevNextNode, prevNode)
    prevNode.next = insertNode;
    prevNextNode.prev = insertNode;
    this.size++;
    return prev.next;
  }
  insertNode(v, index) {
    return this.addNode(v, index);
  }
  addToFirst(v) {
    return this.addNode(v, 0);
  }
  addToLast(v) {
    return this.addNode(v, this.size);
  }
  removeNode(index, isLast) {
    this.checkIndex(index);
    index = isLast ? index - 1 : index;
    let prevNode = this.find(this.dummyNode, index, 0)
    let removeNode = prevNode.next;
    let nextNode = removeNode.next;
    prevNode.next = nextNode;
    nextNode.prev = prevNode;
    removeNode.next = null;
    removeNode.prev = null;
    this.size--;
    return nextNode;
  }
  removeFirstNode() {
    return this.removeNode(0);
  }
  removeLastNode() {
    return this.removeNode(this.size, true);
  }
  checkIndex(index) {
    if (index < 0 || index > this.size) throw Error('Index error');
  }
  getNode(index) {
    this.checkIndex(index);
    if (this.isEmpty()) return;
    return this.find(this.dummyNode, index, 0).next;
  }
  isEmpty() {
    return this.size === 0;
  }
  getSize() {
    return this.size;
  }
}
```



