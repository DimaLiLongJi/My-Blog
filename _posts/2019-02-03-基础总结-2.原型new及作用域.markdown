---
layout:     post
title:      "基础总结-2.原型,new,作用域及闭包"
subtitle:   "js 基础总结"
date:       2019-02-03
author:     "本人"
header-img: "img/2019/summary/js.jpeg"
tags:
    - 基础总结
---


## 原型

### 显式原型 prototype 与 隐式原型 __proto__

因为在 JS 中不是依靠类继承（Class语法糖，实际上还是原型继承）的概念，为了实现类继承的方式，通过 `__proto__` 将对象和原型联系起来组成原型链，得以让对象可以访问到不属于自己的属性。

1. 每个函数 `Function` 都有 显式原型属性 `prototype` ，除了 `Function.prototype.bind()` 和箭头函数

```javascript
const aaa = ()=> {};
aaa.prototype; // undefined
```

2. 函数的属性 `prototype` 的 `constructor` 又指向该函数
3. 每个对象`Object` 都有 隐式原型属性`__proto__`，该属性指向对象的 **构造函数的 `prototype`** (其实这个属性指向了 `[[prototype]]`，但是 `[[prototype]]` 是内部属性，我们并不能访问到，所以使用 `__proto__` 来访问。)
4. 当对象没有某个属性方法时，对象会通过 属性`__proto__` 去创建该对象的构造函数的 `prototype` 上去访问是否存在该属性方法。

```javascript
function A(){}

const a = new A();

a.constructor === A; // true
a.__proto__ === A.prototype; /// true
a.constructor === a.__proto__.constructor === A.prototype.constructor === A; /// true
```

### 原型链

```
`new Demo` => (没有属性或方法的话)
           (`new Demo`的`__proto__`) => `Demo`的`prototype` (没有属性或方法的话)
                                       => (`Demo`的`prototype`的`__proto__`或`new Demo`的`__proto__`的`__proto__`) => `Object`的`prototype` (没有属性或方法的话)
                                                                                                                => (`Object`的`prototype`的`__proto__`或`new Demo`的`__proto__`的`__proto__`的`__proto__`) => `null`
```

对象会沿着 `__proto__` 一直向上查找（其实就是沿着构造函数的`prototype`）不停向上查找

这个链式查找的过程貌似就叫做原型链。

### 一些方法对原型进行遍历枚举

1. `for...in`：不但能遍历对象本身的属性和方法，还能够遍历对象原型链上的所有属性方法**实例+原型中的可枚举属性**。（使用`Object.hasOwnProperty(key)`判断是否为自身属性）
2. `Object.keys()`：用于获取对象自身所有的可枚举的属性值，但**不包括原型中的属性**，然后返回一个由属性名组成的数组
3. `Object.getOwnPropertyNames()`：方法返回对象的所有自身属性的属性名（包括不可枚举的属性）组成的数组，但不会获取原型链上的属性。


## new

new时候发生了什么

1. 新生成了一个对象
2. 生成的对象的隐式原型指向到构造函数的显式原型
3. 绑定 this
4. 执行构造函数
5. 如果构造函数返回对象则返回返回值，如果不是对象则返回新对象

按照上述我们来实现个假 `new`

```javascript
function createObject() {
    // 创建一个空的对象
    const obj = {};
    // 删除第一个参数构造函数，并获得构造函数
    const ConstructorFunc = Array.prototype.shift.call(arguments); 
    // 链接到原型
    obj.__proto__ = ConstructorFunc.prototype;
    // 绑定 this，执行构造函数传入删除构造函数后的参数
    const result = ConstructorFunc.apply(obj, arguments);
    // 确保 new 出来的是个对象
    return typeof result === 'object' ? result : obj;
}
function createObject(ConstructorFunc, ...args) {
    const obj = {};
    obj.__proto__ = ConstructorFunc.prototype;
    const result = ConstructorFunc.apply(obj, args);
    return typeof result === 'object' ? result : obj;
}
```

对于创建一个对象来说，更推荐使用字面量的方式创建对象（无论性能上还是可读性）。因为你使用 `new Object()` 的方式创建对象需要通过作用域链一层层找到 `Object`，但是你使用字面量的方式就没这个问题。

此外注意下 `new` 之后的方法执行，两者结果不同。

```javascript
new Foo.getName();   // => new (Foo.getName())
new Foo().getName(); // => (new Foo()).getName()
```


## instanceof

通过原型链的查找机制，`instanceof` 可以更加准确判断对象的类型。

因为 `instanceof` 内部机制是通过判断对象的原型链中是不是能找到类型的 prototype。

1. 获取类型（右侧）的显式原型
2. 获取对象（左侧）的隐式原型
3. 递归判断是否相同

让我们实现一个 `instanceof`。

```javascript
function instanceofFunc(left, right) {
    // 获得类型的显式原型
    const prototype = right.prototype;
    // 获得对象的隐式原型
    const proto = left.__proto__;
    // 递归判断对象的显式原型是否等于类型的隐式原型

    if (left === null) return false;
    else if (prototype === proto) return true;
    else return instanceofFunc(proto, right);
}

function instanceofFunc2(left, right) {
    while (true) {
        if (left === null) return false;
        if (left === right.prototype) return true;
        left = left.__proto__;
    }
}
```


## this的指向

1. 函数里的 `this` 是调用函数前的对象既函数的调用者 （`a.xx()` => `xx`的`this`是`a`）
2. 全局函数非严格模式指向`window`，严格模式是`undefined`
3. 匿名函数的`this`为创建时的外层的 `this`
4. `Function.prototype.call(fn, a, b)` `Function.prototype.bind(fn, a, b)` `Function.prototype.apply(fn, [a, b])` 会改变 `this`


## 执行上下文

1. 全局执行上下文
2. 函数执行上下文
3. `eval` 执行上下文

每种上下文都有三个重要属性

1. 变量对象（VO），包含变量、函数声明和函数的形参，**该属性只能在全局上下文中访问**
2. 作用域链（JS 采用**词法作用域**，也就是说变量的作用域是在定义时就决定了）
3. `this`


## 函数和变量提升

函数声明

```javascript
function funDeclaration(type){
    return type==="Declaration";
}
```

函数表达式

```javascript
var funExpression = function(type){
  return type==="Expression";
}
```

在生成执行上下文时，会有两个阶段。

第一个阶段是创建的阶段（具体步骤是创建 VO），**JS 解释器会找出需要提升的变量和函数，并且给他们提前在内存中开辟好空间**。

**函数的话会将整个函数存入内存中。**

变量：

1. `var` 会被变量提升，并且被赋值为 `undefined`
2. `let` 会被变量提升，但不会被赋值，因为临时死区导致了并不能在声明前使用。
3. `function`（匿名函数除外）会被提升，相同的函数会覆盖上一个函数，并且**函数提升优先于变量提升** （所谓的函数一等公民）


## 闭包

概念：函数 A 返回了一个函数 B，并且函数 B 中使用了函数 A 的变量，函数 B 就被称为闭包。

所以**闭包就是能读取其他函数内部变量的函数**。

```javascript
function A() {
  let a = 1;
  function B() {
      console.log(a);
  }
  return B;
}
A()(); // 1
```

为什么函数 A 已经弹出调用栈了，为什么函数 B 还能引用到函数 A 中的变量？

因为函数 A 中的 a 变量这时候是存储在堆上的。现在的 JS 引擎可以通过**逃逸分析**辨别出**哪些变量需要存储在堆上，哪些需要存储在栈上**。

`let` 会创建一个块级作用域。
