---
layout:     post
title:      "面试总结"
subtitle:   "面试总结2"
date:       2019-03-20
author:     "本人"
header-img: "img/2019/summary/js.jpeg"
tags:
    - 面试总结
---

## Index

 - [1. 简单讲解一下http2的多路复用](#1-简单讲解一下http2的多路复用)
 - [2. TCP三次握手四次挥手](#2-TCP三次握手四次挥手)
 - [3. AB机器正常连接后，B机器突然重启，问A此时处于TCP什么状态](#3-AB机器正常连接后，B机器突然重启，问A此时处于TCP什么状态)
 - [4. React中setState什么时候是同步的，什么时候是异步的？](#4-React中setState什么时候是同步的，什么时候是异步的？)


### 1. 简单讲解一下http2的多路复用

- `HTTP/1` 的 `HTTP` 连接
 
在 `HTTP/1` 中，**每次请求都会建立一次 `HTTP` 连接，也就是我们常说的3次握手4次挥手**，这个过程在一次请求过程中占用了相当长的时间，即使开启了 `Keep-Alive` ，解决了多次连接的问题，但是依然有两个效率上的问题：

1. 串行的文件传输。当请求a文件时，b文件只能等待，等待a连接到服务器、服务器处理文件、服务器返回文件，这三个步骤。我们假设这三步用时都是1秒，那么a文件用时为3秒，b文件传输完成用时为6秒，依此类推。（注：此项计算有一个前提条件，**就是浏览器和服务器是单通道传输**）
2. 连接数过多。我们假设Apache设置了最大并发数为300，因为浏览器限制，浏览器发起的最大请求数为6，也就是服务器能承载的最高并发数为50，当第51个人访问时，就需要等待前面某个请求处理完成。

- `HTTP/2` 的多路复用
  
多路复用就是为了解决上述的两个性能问题。

在 `HTTP/2` 中，有两个非常重要的概念，分别是**帧（frame）和流（stream）**。

1. 帧代表着最小的数据单位，每个帧会标识出该帧属于哪个流
2. 流也就是多个帧组成的数据流

**多路复用，就是在一个 `TCP` 连接中可以存在多条流。**

换句话说，也就是可以发送多个请求，**对端可以通过帧中的标识知道属于哪个请求**。

通过这个技术，可以避免 `HTTP` 旧版本中的队头阻塞问题，极大的提高传输性能。

### 2. TCP三次握手四次挥手

[我的博客](https://dimalilongji.github.io/my-blog/2019/03/07/%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93-10.%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/#%E5%8F%91%E8%B5%B7-tcp-%E9%93%BE%E6%8E%A5)

### 3. AB机器正常连接后，B机器突然重启，问A此时处于TCP什么状态

如果A 与 B 建立了正常连接后，从未相互发过数据，这个时候 B 突然机器重启，问 A 此时处于 TCP 什么状态？如何消除服务器程序中的这个状态？

[参考](http://crystalwindz.com/unp_note_1/#%E9%9D%9E%E6%AD%A3%E5%B8%B8%E8%BF%9E%E6%8E%A5%E7%BB%88%E6%AD%A2)

1. 三次握手完成后，在服务器接收前，客户发送 `RST`，**会导致服务器接收出错**，错误如何处理依赖于不同的实现
2. 服务器和客户建立连接后，若服务器进程终止，则服务器发送 `FIN` 到客户端。
3. 服务器和客户建立连接后，若服务器主机崩溃，有两种可能：
   1. 服务器不重启，客户继续工作，就会发现对方没有回应(ETIMEOUT)，路由器聪明的话，则是目的地不可达(EHOSTUNREACH)。
   2. 服务器重启后，客户继续工作，然而服务器已丢失客户信息，收到客户数据后响应 `RST`。
4. 服务器和客户建立连接后，若服务器关机，`init` 进程会给所有进程发送 `SIGTERM` 信号预警，然后发送 `SIGKILL` 关闭所有其他进程，这样和2情况没什么差别。

### 4. React中setState什么时候是同步的，什么时候是异步的？

[参考](https://github.com/sisterAn/blog/issues/26)

先说结论：

1. 在生命周期中都是异步的
2. 在 `react` 合成事件中都是异步的
3. 在 `setTimeout` 等异步处理中是同步的
4. 通过 `DOM.addEventListener` 绑定的事件中是同步的

原因：

[源码](https://github.com/facebook/react/blob/35962a00084382b49d1f9e3bd36612925f360e5b/src/renderers/shared/reconciler/ReactUpdates.js#L199)

1. react 通过 **队列机制合并 `state`**
2. 当执行 `setState` 时，讲更新的 `state` 前合并后放入更新队列，而不会立即更新
3. 直接修改 `state` 的值，则不会放入队列，当下次 `setState` 时，之前对 `state` 的修改可能会被忽略**在 typescript 中，`state` 的类型是 `ReadOnly`，所以你想改也改不了**
4. 当调用 `setState` 时，实际上是会执行 `enqueueSetState` 方法，并会对 `partialState` 及 `_pendingStateQueue` 队列进行合并操作，最终通过 `enqueueUpdate` 执行 `state` 更新
5. 会根据一个变量 `isBatchingUpdates` 判断是直接更新 `this.state` 还是放到队列中回头再说，而 `isBatchingUpdates` 默认是 `false`，`setState` 会同步更新 `this.state`
6. 但是，有一个函数 `batchedUpdates`，这个函数会把 `isBatchingUpdates` 修改为 `true`，而当 `React` 在调用事件处理函数之前就会调用这个 `batchedUpdates`，造成的后果，就是由 `React` 控制的事件处理过程 `setState` 不会同步更新 `this.state`。

**最后 如果生命周期，合成事件，`isBatchingUpdates` 为 true，会推进队列**
