---
layout:     post
title:      "面试总结2"
subtitle:   "面试总结2"
date:       2019-03-20
author:     "本人"
header-img: "img/2019/summary/js.jpeg"
tags:
    - 面试总结
---

## Index

 - [1. 简单讲解一下http2的多路复用](#1-简单讲解一下http2的多路复用)
 - [2. TCP三次握手四次挥手](#2-TCP三次握手四次挥手)
 - [3. AB机器正常连接后，B机器突然重启，问A此时处于TCP什么状态](#3-AB机器正常连接后，B机器突然重启，问A此时处于TCP什么状态)
 - [4. 介绍下重绘Repaint和回流Reflow](#4-介绍下重绘Repaint和回流Reflow)
 - [5. mysql中truncate、delete、drop的区别](#5-mysql中truncate、delete、drop的区别)
 - [6. gitPull是哪几个命令](#6-gitPull是哪几个命令)
 - [7. fastForward与noFastForward](#7-fastForward与noFastForward)
 - [8. gitMerge与gitRebase](#8-gitMerge与gitRebase)


### 1. 简单讲解一下http2的多路复用

- `HTTP/1` 的 `HTTP` 连接
 
在 `HTTP/1` 中，**每次请求都会建立一次 `HTTP` 连接，也就是我们常说的3次握手4次挥手**，这个过程在一次请求过程中占用了相当长的时间，即使开启了 `Keep-Alive` ，解决了多次连接的问题，但是依然有两个效率上的问题：

1. 串行的文件传输。当请求a文件时，b文件只能等待，等待a连接到服务器、服务器处理文件、服务器返回文件，这三个步骤。我们假设这三步用时都是1秒，那么a文件用时为3秒，b文件传输完成用时为6秒，依此类推。（注：此项计算有一个前提条件，**就是浏览器和服务器是单通道传输**）
2. 连接数过多。我们假设Apache设置了最大并发数为300，因为**浏览器限制，浏览器发起的最大请求数为6**，也就是服务器能承载的最高并发数为50，当第51个人访问时，就需要等待前面某个请求处理完成。

- `HTTP/2` 的多路复用
  
多路复用就是为了解决上述的两个性能问题。

在 `HTTP/2` 中，有两个非常重要的概念，分别是**帧（frame）和流（stream）**。

1. 帧代表着最小的数据单位，每个帧会标识出该帧属于哪个流
2. 流也就是多个帧组成的数据流

**多路复用，就是在一个 `TCP` 连接中可以存在多条流。**

换句话说，也就是可以发送多个请求，**对端可以通过帧中的标识知道属于哪个请求**。

通过这个技术，可以避免 `HTTP` 旧版本中的队头阻塞问题，极大的提高传输性能。

### 2. TCP三次握手四次挥手

[我的博客](https://dimalilongji.github.io/my-blog/2019/03/07/%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93-10.%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/#%E5%8F%91%E8%B5%B7-tcp-%E9%93%BE%E6%8E%A5)

### 3. AB机器正常连接后，B机器突然重启，问A此时处于TCP什么状态

如果A 与 B 建立了正常连接后，从未相互发过数据，这个时候 B 突然机器重启，问 A 此时处于 TCP 什么状态？如何消除服务器程序中的这个状态？

[参考](http://crystalwindz.com/unp_note_1/#%E9%9D%9E%E6%AD%A3%E5%B8%B8%E8%BF%9E%E6%8E%A5%E7%BB%88%E6%AD%A2)

1. 三次握手完成后，在服务器接收前，客户发送 `RST`，**会导致服务器接收出错**，错误如何处理依赖于不同的实现
2. 服务器和客户建立连接后，若服务器进程终止，则服务器发送 `FIN` 到客户端。
3. 服务器和客户建立连接后，若服务器主机崩溃，有两种可能：
   1. 服务器不重启，客户继续工作，就会发现对方没有回应(ETIMEOUT)，路由器聪明的话，则是目的地不可达(EHOSTUNREACH)。
   2. 服务器重启后，客户继续工作，然而服务器已丢失客户信息，收到客户数据后响应 `RST`。
4. 服务器和客户建立连接后，若服务器关机，`init` 进程会给所有进程发送 `SIGTERM` 信号预警，然后发送 `SIGKILL` 关闭所有其他进程，这样和2情况没什么差别。

### 4. 介绍下重绘Repaint和回流Reflow

[参考](https://developers.google.com/web/fundamentals/performance/critical-rendering-path/constructing-the-object-model?hl=zh-cn)

- 浏览器渲染机制

1. 浏览器采用流式布局模型（Flow Based Layout）
2. 浏览器会把HTML解析成DOM，把CSS解析成CSSOM，DOM和CSSOM合并就产生了渲染树（Render Tree）。
3. 有了RenderTree，我们就知道了所有节点的样式，然后计算他们在页面上的大小和位置，最后把节点绘制到页面上。
4. 由于浏览器使用流式布局，对Render Tree的计算通常只需要遍历一次就可以完成，但table及其内部元素除外，他们可能需要多次计算，通常要花3倍于同等元素的时间，这也是为什么要避免使用table布局的原因之一。
 
- 重绘

由于**样式发生改变而不会影响布局**的，称为重绘，例如`outline, visibility, color、background-color`等，重绘的代价是高昂的，因为浏览器必须验证DOM树上其他节点元素的可见性。

- 回流

回流是**布局或者几何属性需要改变就称为回流**。回流是影响浏览器性能的关键因素，因为其变化涉及到部分页面（或是整个页面）的布局更新。一个元素的回流可能会导致了其所有子元素以及DOM中紧随其后的节点、祖先节点元素的随后的回流。

### 5. mysql中truncate、delete、drop的区别

- 表数据和表结构

truncate、delete都会删除表中的数据，drop不仅会删除表数据也会删除表结构。

- 是否重置标识计数器

truncate 删除表中的所有行，表的列、约束、索引保持不变，但标识计数器将被重置。

而delete会保留标识计数器。

**例如，如果想清空主键自增的表数据，并且重置主键位置，则使用truncate；如果想清空主键自增的表数据，并且保留主键位置，则使用delete。**

- 删除部分表的数据

只能用 delete + where

- 日志

delete 会记录在日志以恢复，而其他2个不会

- 事务

delete是DML语句,不会自动提交。drop/truncate都是DDL语句,执行后会自动提交

- 外键

对于由外键约束引用的表，不能使用 `TRUNCATE TABLE`，而应使用不带 `WHERE` 子句的 `DELETE` 语句。

由于 `TRUNCATE TABLE` 不记录在日志中，所以它不能激活触发器

### 6. gitPull是哪几个命令

git pull = git fetch + git merge

### 7. fastForward与noFastForward

- Fast-Forward

当前分支合并到另一分支时，如果**没有分歧解决，就会直接移动文件指针**。这个过程叫做fastforward。

- No-Fast-Forward

当前分支合并到另一分支时，如果没有分歧解决，也会使得**每一次的合并都创建一个新的commit记录**，用来避免丢失信息。

### 8. gitMerge与gitRebase

假设现在有个分支a是在E节点上从master上切出来的。

```
    A---B---C 分支a
    /         \
D---E---F---G---H 分支master
```

- git merge

git merge 会按照a分支被切出的时间点合并，**不改变时间顺序与节点顺序**，并最后**生成一个 merge commit**

```
     A--B--C-(merge commit) a
    /       / \
D---E---F---G---H master

```

- git rebase

rebase的含义是**改变子分支branch out(切出点)的位置**，并最后不会生成一个 merge commit

```
            A---B---C a
            /         
D---E---F---G master
```
