---
layout:     post
title:      "vue源码阅读-2.实例化vue"
subtitle:   "vue源码"
date:       2018-11-17
author:     "本人"
header-img: "img/2018/vue/vue.png"
tags:
    - vue源码阅读
---


## new Vue

实例化 Vue 的时候发生了什么？

> src/core/instance/index.js

```typescript
function Vue (options) {
  if (process.env.NODE_ENV !== 'production' &&
    !(this instanceof Vue)
  ) {
    warn('Vue is a constructor and should be called with the `new` keyword')
  }
  this._init(options)
}
```

`this._init(options)` 这里才是关键。

Vue 初始化主要就干了几件事情，合并配置，初始化生命周期，初始化事件中心，初始化渲染，初始化 `data`、`props`、`computed`、`watcher` 等等。

> src/core/instance/init.js

```javascript
vm._self = vm
initLifecycle(vm)
initEvents(vm)
initRender(vm)
callHook(vm, 'beforeCreate')
initInjections(vm) // resolve injections before data/props
initState(vm)
initProvide(vm) // resolve provide after data/props
callHook(vm, 'created')

/* istanbul ignore if */
if (process.env.NODE_ENV !== 'production' && config.performance && mark) {
  vm._name = formatComponentName(vm, false)
  mark(endTag)
  measure(`vue ${vm._name} init`, startTag, endTag)
}

if (vm.$options.el) {
  vm.$mount(vm.$options.el)
}
```

在初始化的最后，检测到如果有 `el` 属性，则调用 `vm.$mount` 方法挂载 `vm`，挂载的目标就是把模板渲染成最终的 `DOM`，那么接下来我们来分析 Vue 的挂载过程。

## $mount 挂载实例

`$mount` 是在这文件下定义的

> src/platform/web/runtime/index.js

```typescript
// public mount method
Vue.prototype.$mount = function (
  el?: string | Element,
  hydrating?: boolean
): Component {
  el = el && inBrowser ? query(el) : undefined
  return mountComponent(this, el, hydrating)
}
```

`$mount` 方法支持传入 2 个参数。

第一个是 `el`，它表示挂载的元素，可以是字符串，也可以是 `DOM` 对象。**如果是字符串在浏览器环境下会调用 `query` 方法转换成 `DOM` 对象的。**

第二个参数是和服务端渲染相关，在浏览器环境下我们不需要传第二个参数。

### mountComponent

`$mount` 方法实际上会去调用 `mountComponent` 方法，这个方法定义在 src/core/instance/lifecycle.js 文件中：

> src/core/instance/lifecycle.js

```typescript
export function mountComponent (
  vm: Component,
  el: ?Element,
  hydrating?: boolean
): Component {
  vm.$el = el
  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode
    if (process.env.NODE_ENV !== 'production') {
      /* istanbul ignore if */
      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||
        vm.$options.el || el) {
        warn(
          'You are using the runtime-only build of Vue where the template ' +
          'compiler is not available. Either pre-compile the templates into ' +
          'render functions, or use the compiler-included build.',
          vm
        )
      } else {
        warn(
          'Failed to mount component: template or render function not defined.',
          vm
        )
      }
    }
  }
  callHook(vm, 'beforeMount')

  let updateComponent
  /* istanbul ignore if */
  if (process.env.NODE_ENV !== 'production' && config.performance && mark) {
    updateComponent = () => {
      const name = vm._name
      const id = vm._uid
      const startTag = `vue-perf-start:${id}`
      const endTag = `vue-perf-end:${id}`

      mark(startTag)
      const vnode = vm._render()
      mark(endTag)
      measure(`vue ${name} render`, startTag, endTag)

      mark(startTag)
      vm._update(vnode, hydrating)
      mark(endTag)
      measure(`vue ${name} patch`, startTag, endTag)
    }
  } else {
    updateComponent = () => {
      vm._update(vm._render(), hydrating)
    }
  }

  // we set this to vm._watcher inside the watcher's constructor
  // since the watcher's initial patch may call $forceUpdate (e.g. inside child
  // component's mounted hook), which relies on vm._watcher being already defined
  new Watcher(vm, updateComponent, noop, {
    before () {
      if (vm._isMounted && !vm._isDestroyed) {
        callHook(vm, 'beforeUpdate')
      }
    }
  }, true /* isRenderWatcher */)
  hydrating = false

  // manually mounted instance, call mounted on self
  // mounted is called for render-created child components in its inserted hook
  if (vm.$vnode == null) {
    vm._isMounted = true
    callHook(vm, 'mounted')
  }
  return vm
}
```

首先判断下 `render` 方法存在不，如果不存在就赋值为 `createEmptyVNode` 。

`mountComponent` 核心就是先调用 `vm._render` 方法先生成 `虚拟 Node`，接下来触发生命周期钩子 `beforeMount`，赋值 `updateComponent` 方法并传递给 **一个初始化的 `Watcher`**。

在 `Watcher` 的回调函数中会调用 `updateComponent` 方法，最终调用 `vm._update` 更新 `DOM`。

### _render

> src/core/instance/render.js

```typescript
Vue.prototype._render = function (): VNode {
const vm: Component = this
const { render, _parentVnode } = vm.$options

if (_parentVnode) {
  vm.$scopedSlots = normalizeScopedSlots(
    _parentVnode.data.scopedSlots,
    vm.$slots,
    vm.$scopedSlots
  )
}

// set parent vnode. this allows render functions to have access
// to the data on the placeholder node.
vm.$vnode = _parentVnode
// render self
let vnode
try {
  // There's no need to maintain a stack becaues all render fns are called
  // separately from one another. Nested component's render fns are called
  // when parent component is patched.
  currentRenderingInstance = vm
  vnode = render.call(vm._renderProxy, vm.$createElement)
} catch (e) {
  handleError(e, vm, `render`)
  // return error render result,
  // or previous vnode to prevent render error causing blank component
  /* istanbul ignore else */
  if (process.env.NODE_ENV !== 'production' && vm.$options.renderError) {
    try {
      vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e)
    } catch (e) {
      handleError(e, vm, `renderError`)
      vnode = vm._vnode
    }
  } else {
    vnode = vm._vnode
  }
} finally {
  currentRenderingInstance = null
}
// if the returned array contains only a single node, allow it
if (Array.isArray(vnode) && vnode.length === 1) {
  vnode = vnode[0]
}
// return empty vnode in case the render function errored out
if (!(vnode instanceof VNode)) {
  if (process.env.NODE_ENV !== 'production' && Array.isArray(vnode)) {
    warn(
      'Multiple root nodes returned from render function. Render function ' +
      'should return a single root node.',
      vm
    )
  }
  vnode = createEmptyVNode()
}
```

`_render` 是 Vue 的一个私有方法，主要是通过 `$options.render` 调用Vue上的 `$createElement` 生成一个 `虚拟DOM`。

### createElement

> src/core/vdom/create-element.js

```typescript
export function createElement (
  context: Component,
  tag: any,
  data: any,
  children: any,
  normalizationType: any,
  alwaysNormalize: boolean
): VNode | Array<VNode> {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children
    children = data
    data = undefined
  }
  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE
  }
  return _createElement(context, tag, data, children, normalizationType)
}

export function _createElement (
  context: Component,
  tag?: string | Class<Component> | Function | Object,
  data?: VNodeData,
  children?: any,
  normalizationType?: number
): VNode | Array<VNode> {
  if (isDef(data) && isDef((data: any).__ob__)) {
    process.env.NODE_ENV !== 'production' && warn(
      `Avoid using observed data object as vnode data: ${JSON.stringify(data)}\n` +
      'Always create fresh vnode data objects in each render!',
      context
    )
    return createEmptyVNode()
  }
  // object syntax in v-bind
  if (isDef(data) && isDef(data.is)) {
    tag = data.is
  }
  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode()
  }
  // warn against non-primitive key
  if (process.env.NODE_ENV !== 'production' &&
    isDef(data) && isDef(data.key) && !isPrimitive(data.key)
  ) {
    if (!__WEEX__ || !('@binding' in data.key)) {
      warn(
        'Avoid using non-primitive value as key, ' +
        'use string/number value instead.',
        context
      )
    }
  }
  // support single function children as default scoped slot
  if (Array.isArray(children) &&
    typeof children[0] === 'function'
  ) {
    data = data || {}
    data.scopedSlots = { default: children[0] }
    children.length = 0
  }
  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children)
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children)
  }
  let vnode, ns
  if (typeof tag === 'string') {
    let Ctor
    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag)
    if (config.isReservedTag(tag)) {
      // platform built-in elements
      vnode = new VNode(
        config.parsePlatformTagName(tag), data, children,
        undefined, undefined, context
      )
    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag)
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(
        tag, data, children,
        undefined, undefined, context
      )
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children)
  }
  if (Array.isArray(vnode)) {
    return vnode
  } else if (isDef(vnode)) {
    if (isDef(ns)) applyNS(vnode, ns)
    if (isDef(data)) registerDeepBindings(data)
    return vnode
  } else {
    return createEmptyVNode()
  }
}
```

`createElement` 函数的流程略微有点多，我们接下来主要分析 2 个重点的流程 —— children 的规范化以及 VNode 的创建。

#### children 的规范化

首选判断子元素类型，再分别调用

`normalizeArrayChildren` 主要的逻辑就是遍历 `children` ，获得单个节点 c，然后对 c 的类型判断。

1. 如果是一个数组类型，则递归调用 `normalizeArrayChildren` ；

2. 如果是基础类型，则通过 `createTextVNode` 方法转换成 `VNode` 类型；

3. 否则就已经是 `VNode` 类型了，如果 `children` 是一个列表并且列表还存在嵌套的情况，则根据 `nestedIndex` 去更新它的 `key`。

如果存在两个连续的 `text` 节点，会把它们合并成一个 `text` 节点

#### vnode 的创建

`createElement` 主要是 传递参数到 `_createElement` 方法，先格式化 `children`，然后创建 `VNode`。

`_createElement`  方法有 5 个参:

1. `context: Component,` 表示 VNode 的上下文环境，它是 Component 组件
2. `tag?: string | Class<Component> | Function | Object,` 表示标签
3. `data?: VNodeData,` 表示 VNode 的数据
4. `children?: any,` 表示当前 VNode 的子节点
5. `normalizationType?: number` 表示子节点规范的类型，类型不同规范的方法也就不一样，它主要是参考 render 函数是编译生成的还是用户手写的。

接下来判断 `tag`: 

如果是为已注册的组件名，则通过 `createComponent` 创建一个组件类型的 `VNode`,否则创建一个未知的标签的 `VNode`。 

如果是 `tag` 一个 `Component` 类型，则直接调用 `createComponent` 创建一个组件类型的 `VNode` 节点。

### update

`_update` 是实例的一个私有方法，它被调用的时机有 2 个，一个是首次渲染，一个是数据更新的时候；

由于我们这一章节只分析首次渲染部分，数据更新部分会在之后分析响应式原理的时候涉及。

`_update` 方法的作用是把 VNode 渲染成真实的 `DOM。

> src/core/instance/lifecycle.js

```typescript
Vue.prototype._update = function (vnode: VNode, hydrating?: boolean) {
 const vm: Component = this
 const prevEl = vm.$el
 const prevVnode = vm._vnode
 const restoreActiveInstance = setActiveInstance(vm)
 vm._vnode = vnode
 // Vue.prototype.__patch__ is injected in entry points
 // based on the rendering backend used.
 if (!prevVnode) {
   // initial render
   vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */)
 } else {
   // updates
   vm.$el = vm.__patch__(prevVnode, vnode)
 }
 restoreActiveInstance()
 // update __vue__ reference
 if (prevEl) {
   prevEl.__vue__ = null
 }
 if (vm.$el) {
   vm.$el.__vue__ = vm
 }
 // if parent is an HOC, update its $el as well
 if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
   vm.$parent.$el = vm.$el
 }
 // updated hook is called by the scheduler to ensure that children are
 // updated in a parent's updated hook.
}
```

核心就是调用 `vm.__patch__` 方法，这个方法实际上在不同的平台，比如 web 和 weex 上的定义是不一样的。

> src/platforms/web/runtime/index.js

```javascript
Vue.prototype.__patch__ = inBrowser ? patch : noop
```

> src/platforms/web/runtime/patch.js

```typescript
export const patch: Function = createPatchFunction({ nodeOps, modules })
```

> src/core/vdom/patch.js

[`createPatchFunction`](https://github.com/vuejs/vue/blob/dev/src/core/vdom/patch.js#L70)

结合首次渲染，所以在执行 `patch` 函数的时候，传入的 `vm.$el` 对应的是例子中 id 为 `app` 的 `DOM` 对象。

这个也就是我们在 `index.html` 模板中写的 `<div id="app">`。

`vm.$el` 的赋值是在之前 `mountComponent` 函数做的，`vnode` 对应的是调用 `render` 函数的返回值`VNode`，

`hydrating` 在非服务端渲染情况下为 `false`，`removeOnly` 为 `false`。

由于我们传入的 `oldVnode` 实际上是一个 `DOM container`，所以 `isRealElement` 为 `true`，

接下来又通过 `emptyNodeAt` 方法把 `oldVnode` 转换成 `VNode` 对象，

然后再调用 `createElm` 方法，这个方法在这里非常重要，来看一下它的实现：

``` typescript
function createElm (
 vnode,
 insertedVnodeQueue,
 parentElm,
 refElm,
 nested,
 ownerArray,
 index
) {
 if (isDef(vnode.elm) && isDef(ownerArray)) {
   // This vnode was used in a previous render!
   // now it's used as a new node, overwriting its elm would cause
   // potential patch errors down the road when it's used as an insertion
   // reference node. Instead, we clone the node on-demand before creating
   // associated DOM element for it.
   vnode = ownerArray[index] = cloneVNode(vnode)
 }

 vnode.isRootInsert = !nested // for transition enter check
 if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
   return
 }

 const data = vnode.data
 const children = vnode.children
 const tag = vnode.tag
 if (isDef(tag)) {
   if (process.env.NODE_ENV !== 'production') {
     if (data && data.pre) {
       creatingElmInVPre++
     }
     if (isUnknownElement(vnode, creatingElmInVPre)) {
       warn(
         'Unknown custom element: <' + tag + '> - did you ' +
         'register the component correctly? For recursive components, ' +
         'make sure to provide the "name" option.',
         vnode.context
       )
     }
   }

   vnode.elm = vnode.ns
     ? nodeOps.createElementNS(vnode.ns, tag)
     : nodeOps.createElement(tag, vnode)
   setScope(vnode)

   /* istanbul ignore if */
   if (__WEEX__) {
     // in Weex, the default insertion order is parent-first.
     // List items can be optimized to use children-first insertion
     // with append="tree".
     const appendAsTree = isDef(data) && isTrue(data.appendAsTree)
     if (!appendAsTree) {
       if (isDef(data)) {
         invokeCreateHooks(vnode, insertedVnodeQueue)
       }
       insert(parentElm, vnode.elm, refElm)
     }
     createChildren(vnode, children, insertedVnodeQueue)
     if (appendAsTree) {
       if (isDef(data)) {
         invokeCreateHooks(vnode, insertedVnodeQueue)
       }
       insert(parentElm, vnode.elm, refElm)
     }
   } else {
     createChildren(vnode, children, insertedVnodeQueue)
     if (isDef(data)) {
       invokeCreateHooks(vnode, insertedVnodeQueue)
     }
     insert(parentElm, vnode.elm, refElm)
   }

   if (process.env.NODE_ENV !== 'production' && data && data.pre) {
     creatingElmInVPre--
   }
 } else if (isTrue(vnode.isComment)) {
   vnode.elm = nodeOps.createComment(vnode.text)
   insert(parentElm, vnode.elm, refElm)
 } else {
   vnode.elm = nodeOps.createTextNode(vnode.text)
   insert(parentElm, vnode.elm, refElm)
 }
}
```

`createElm` 的作用是通过虚拟节点创建真实的 `DOM` 并插入到它的父节点中。 

看一下它的一些关键逻辑，`createComponent` 方法目的是尝试创建子组件，这个逻辑在之后组件的章节会详细介绍，在当前这个 case 下它的返回值为 `false`；

接下来判断 `vnode` 是否包含 `tag`，如果包含，先简单对 `tag` 的合法性在非生产环境下做校验，看是否是一个合法标签；

然后再去调用平台 DOM 的操作去创建一个占位符元素。

``` javascript
vnode.elm = vnode.ns
  ? nodeOps.createElementNS(vnode.ns, tag)
  : nodeOps.createElement(tag, vnode
```

接下来调用 `createChildren` 方法去创建子元素：

`createChildren` 的逻辑很简单，实际上是遍历子虚拟节点，递归调用 `createElm`，这是一种常用的**深度优先的遍历算法**，这里要注意的一点是在遍历过程中会把 `vnode.elm` 作为父容器的 `DOM` 节点占位符传入。

```javascript
createChildren(vnode, children, insertedVnodeQueue)

function createChildren (vnode, children, insertedVnodeQueue) {
 if (Array.isArray(children)) {
   if (process.env.NODE_ENV !== 'production') {
     checkDuplicateKeys(children)
   }
   for (let i = 0; i < children.length; ++i) {
     createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i)
   }
 } else if (isPrimitive(vnode.text)) {
   nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)))
 }
}
```

这里面 Vue 用了一个队列的思想，接着再调用 `invokeCreateHooks` 方法执行所有的 `create` 的钩子

如果是创建一个新的就创建一个新的 `Vnode`，

如果是插入，就把 `vnode` push 到 `insertedVnodeQueue` 中。

```javascript
 if (isDef(data)) {
  invokeCreateHooks(vnode, insertedVnodeQueue)
}

function invokeCreateHooks (vnode, insertedVnodeQueue) {
  for (let i = 0; i < cbs.create.length; ++i) {
    cbs.create[i](emptyNode, vnode)
  }
  i = vnode.data.hook // Reuse variable
  if (isDef(i)) {
    if (isDef(i.create)) i.create(emptyNode, vnode)
    if (isDef(i.insert)) insertedVnodeQueue.push(vnode)
  }
}
```

最后调用 `insert` 方法把 `DOM` 插入到父节点中。

因为是递归调用，子元素会优先调用 `insert`，所以整个 `vnode` 树节点的插入顺序是先子后父。

```javascript
insert(parentElm, vnode.elm, refElm)

function insert (parent, elm, ref) {
  if (isDef(parent)) {
    if (isDef(ref)) {
      if (ref.parentNode === parent) {
        nodeOps.insertBefore(parent, elm, ref)
      }
    } else {
      nodeOps.appendChild(parent, elm)
    }
  }
}
```

我们根据之前递归 `createElm` 生成的 `vnode` 插入顺序队列(`insertedVnodeQueue`)，执行相关的 insert 钩子函数。


## 总结

![new Vue](/img/2018/vue/new-vue.png)

