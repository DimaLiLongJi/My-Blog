---
layout:     post
title:      "基础总结-8.浏览器相关"
subtitle:   "js 基础总结"
date:       2019-02-14
author:     "本人"
header-img: "img/2019/summary/js.jpeg"
tags:
    - 基础总结
---


## 浏览器事件模型

### 事件捕获 => 事件到达 => 事件冒泡

- `window` 往事件触发处传播，遇到注册的捕获事件会触发
- 传播到事件触发处时触发注册的事件
- 从事件触发处往 `window` 传播，遇到注册的冒泡事件会触发

事件触发一般来说会按照上面的顺序进行，但是也有特例，如果给一个**目标子节点同时注册冒泡和捕获事件，事件触发会按照注册的顺序执行**，而父节点则会按照先捕获后触发。

```javascript
// 点击 #father , 父捕获 => 父冒泡
const node = document.getElementById('father');
node.addEventListener(
  'click',
  event => {
    console.log('父冒泡');
  },
  false
);
node.addEventListener(
  'click',
  event => {
    console.log('父捕获 ');
  },
  true
);

// 点击 #child , 父捕获 => 子冒泡 => 子捕获 => 父冒泡
const node2 = document.getElementById('child')
node2.addEventListener(
  'click',
  event => {
    console.log('子冒泡');
  },
  false
);
node2.addEventListener(
  'click',
  event => {
    console.log('子捕获 ');
  },
  true
);
```

### 事件代理

如果一个节点中的子节点是动态生成的，那么子节点需要注册事件的话应该注册在父节点上

事件代理的方式相对于直接给目标注册事件来说，有以下优点

- 节省内存
- 不需要给子节点注销事件


## 跨域

因为浏览器出于安全考虑，有同源策略。也就是说，如果协议、域名或者端口有一个不同就是跨域，Ajax 请求会失败。

### JSONP

JSONP 的原理很简单，就是利用 `<script>` 标签没有跨域限制的漏洞。

通过 `<script>`标签指向一个需要访问的地址并提供一个回调函数来接收数据当需要通讯时。

```html
<script src="http://domain/api?param1=a&param2=b&callback=jsonp"></script>
<script>
    function jsonp(data) { console.log(data) }
</script>
```

```javascript
// client.js
function jsonp(url, params, callback) {
  return new Promise((res, rej) => {
    const script = document.createElement('script');
    script.async = true;
    script.type = 'text/javascript';

    window[callback] = function(data) {
      res(data);
      document.body.removeChild(script);
    }

    params = { ...params, callback } // wd=b&callback=show
    let arrs = []
    for (let key in params) {
      arrs.push(`${key}=${params[key]}`)
    }
    script.src = `${url}?${arrs.join('&')}`

    document.body.appendChild(script);
  })
}
jsonp({
  url: 'http://localhost:3000/say',
  params: { wd: 'b' },
  callback: 'show'
}).then(data => {
  console.log(data)
});

// server.js
let express = require('express')
let app = express()
app.get('/say', function(req, res) {
  let { wd, callback } = req.query
  console.log(wd) // Iloveyou
  console.log(callback) // show
  res.end(`${callback}('我不爱你')`)
})
app.listen(3000)
```

### CORS

服务端设置 `Access-Control-Allow-Origin` 就可以开启 CORS。

该属性表示哪些域名可以访问资源，如果设置通配符则表示所有网站都可以访问资源。

1. 浏览器必须首先使用 `OPTIONS` 方法发起一个预检请求（preflight request），从而获知服务端是否允许该跨域请求。
2. 服务器确认允许之后，才发起实际的 HTTP 请求。
3. 在预检请求的返回中，服务器端也可以通知客户端，是否需要携带身份凭证（包括 `Cookies` 和 `HTTP` 认证相关数据）

### document.domain二级域名

该方式只能用于二级域名相同的情况下，比如 `a.test.com` 和 `b.test.com` 适用于该方式。

只需要给页面添加 `document.domain = 'test.com'` 表示二级域名都相同就可以实现跨域。

### WebSocket可以跨域

### nginx反向代理/Node中间层代理


## 渲染机制

### 渲染

浏览器的渲染机制一般分为以下几个步骤

1. 处理 HTML 并构建 DOM 树。
2. 处理 CSS 构建 CSSOM 树。（**CSSOM 和 DOM 是并行的**）
3. 将 DOM 与 CSSOM 合并成一个渲染树。
4. 根据渲染树来布局，计算每个节点的位置。
5. 调用 GPU 绘制，合成图层，显示在屏幕上。

在构建 CSSOM 树时，会阻塞渲染，直至 CSSOM 树构建完成。

并且构建 CSSOM 树是一个十分消耗性能的过程，所以应该尽量保证层级扁平，减少过度层叠，越是具体的 CSS 选择器，执行速度越慢。

**当 HTML 解析到 script 标签时，会暂停构建 DOM 和 CSSOM ，然后等待js完成后才会从 CSSOM 开始，并阻塞 DOM 构建直到 CSSOM 完成。**

也就是说，如果你想首屏渲染的越快，就越不应该在首屏就加载 JS 文件。

并且 CSS 也会影响 JS 的执行，只有当解析完样式表才会执行 JS，所以也可以认为这种情况下，CSS 也会暂停构建 DOM。

**`script` 标签不一定会阻塞渲染**

- `<script defer="defer">` **异步加载脚本**，但是执行要在**所有元素解析（`DOMContentLoaded`）完成**之后`Load` 事件之前完成，**按照先后顺序执行**。
- `<script async="async">` **异步加载脚本**，**不会按照顺序执行加载完立即执行**。

### `Load` 和 `DOMContentLoaded` 区别

`Load` 事件触发代表页面中的 `DOM，CSS，JS，图片` 已经全部加载完毕。

`DOMContentLoaded` 事件触发代表初始的 `HTML` 被完全加载和解析，不需要等待 `CSS，JS，图片` 加载。

### 图层

一般来说，可以把普通文档流看成一个图层。特定的属性可以生成一个新的图层。不同的图层渲染互不影响，所以对于某些频繁需要渲染的建议单独生成一个新图层，提高性能。但也不能生成过多的图层，会引起反作用。

通过以下几个常用属性可以生成新图层

- 3D 变换：`translate3d、translateZ`
- `will-change`
- `video、iframe` 标签
- 通过动画实现的 `opacity` 动画转换
- `position: fixed`

### 重绘（Repaint）和回流（Reflow）

重绘是当节点需要更改外观而不会影响布局的，比如改变 `color` 就叫称为重绘。

回流是**布局或者几何属性需要改变**就称为回流。

### 浏览器渲染性能优化

- 避免获取布局信息触发回流

现代浏览器大多都是通过**队列机制来批量更新布局**，

**浏览器会把修改操作放在队列中**，至少一个浏览器刷新（即16.6ms）才会清空队列。

**但当你获取布局信息的时候，队列中可能有会影响这些属性或方法返回值的操作，即使没有，浏览器也会强制清空队列，触发回流与重绘来确保返回正确的值**。

主要包括以下属性或方法：

`offsetTop、offsetLeft、offsetWidth、offsetHeight`
`scrollTop、scrollLeft、scrollWidth、scrollHeight`
`clientTop、clientLeft、clientWidth、clientHeight`
`width、height`
`getComputedStyle()`
`getBoundingClientRect()`

所以，我们应该避免频繁的使用上述的属性，他们都会强制渲染刷新队列。

- 减少重绘与回流

1. 使用 `transform` 替代 `top`
2. 使用 `visibility` 替换 `display: none` ，因为前者只会引起重绘，后者会引发回流
3. 避免使用 `table` 布局，可能很小的一个小改动会造成整个 `table` 的重新布局。
4. 尽可能在`DOM`树的最末端改变 `class`，回流是不可避免的，但可以减少其影响。尽可能在DOM树的最末端改变 `class`，可以限制了回流的范围，使其影响尽可能少的节点。
5. 避免设置多层内联样式，`CSS` 选择符从右往左匹配查找，避免节点层级过多。

- JavaScript 操作 DOM CSS

1. 避免频繁操作样式，最好一次性重写 `style` 属性，或者将样式列表定义为 `class` 并一次性更改 `class` 属性。
2. 避免频繁操作 `DOM` ，创建一个 `documentFragment`，在它上面应用所有 `DOM` 操作，最后再把它添加到文档中。
3. 避免频繁读取会引发回流/重绘的属性，如果确实需要多次使用，就用一个变量缓存起来。
4. 对具有复杂动画的元素使用绝对定位，使它脱离文档流，否则会引起父元素及后续元素频繁回流。

### 浏览器存储

#### cookie

- 一般由服务器生成，可以设置过期时间
- 每个key最大4K
- 每次都会携带在 `header` 中，对于请求性能影响
- `value`	如果用于保存用户登录态，应该将该值加密，不能使用明文的用户标识（**JWT**）
- `http-only`	不能通过 JS 访问 `Cookie`，减少 XSS 攻击
- `secure` 只能在协议为 `HTTPS` 的请求中携带
- `same-site`	规定浏览器不能在跨域请求中携带 `Cookie`，减少 CSRF 攻击

- cookie 与 session 的区别？

cookie以文本格式存储在浏览器上，存储量有限；
而session会话存储在服务端，可以无限量存储多个变量并且比cookie更安全

#### localStorage

- 除非被清理，否则一直存在	
- 每个key5M
- 不参与

#### sessionStorage

- 页面关闭就清理	
- 每个key5M
- 不参与

#### indexDB

- 除非被清理，否则一直存在
- 无限
- 不参与

可以看到，`cookie` 已经不建议用于存储。如果没有大量数据存储需求的话，可以使用 `localStorage` 和 `sessionStorage` 。

对于不怎么改变的数据尽量使用 `localStorage` 存储，否则可以用 `sessionStorage` 存储。

对于 `cookie`，我们还需要注意安全性。


