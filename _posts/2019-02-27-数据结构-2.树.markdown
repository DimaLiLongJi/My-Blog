---
layout:     post
title:      "数据结构-2.树"
subtitle:   "数据结构学习"
date:       2019-02-27
author:     "本人"
header-img: "img/2019/summary/js.jpeg"
tags:
    - 数据结构
---


## 树

树状图是一种数据结构，它是由n（n>=1）个有限结点组成一个具有层次关系的有穷集。

把它叫做“树”是因为它看起来像一棵倒挂的树，也就是说它是根朝上，而叶朝下的。

它具有以下的特点：

1. 每个结点有零个或多个子结点
2. 没有父结点的结点称为根结点
3. 每一个非根结点有且只有一个父结点
4. 除了根结点外，每个子结点可以分为多个不相交的子树

每个元素称为结点（node）

有一个特定的结点被称为根结点或树根（root）

除根结点之外的其余数据元素被分为m（m≥0）个互不相交的集合T1，T2，……Tm-1，其中每一个集合Ti（1<=i<=m）本身也是一棵树，被称作原树的子树（subtree）

### 二叉树

树拥有很多种结构，二叉树是树中最常用的结构，同时也是一个天然的递归结构。

二叉树拥有一个根节点，每个节点至多拥有两个子节点，分别为：左节点和右节点。

树的最底部节点称之为叶节点，当一颗树的叶数量数量为满时，该树可以称之为满二叉树。

![二叉树](/my-blog/img/2019/02/二叉树.png)

#### 完全二叉树

设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数2个，第 h 层所有的结点都连续集中在最左边

![完全二叉树](/my-blog/img/2019/02/完全二叉树.png)

#### 满二叉树

除了叶结点外每一个结点都有左右子叶且叶子结点都处在最底层的二叉树。**深度为k,且含有 2的k次幂 - 1 个节点的两叉树** 是一种特殊的完全二叉树

![满二叉树](/my-blog/img/2019/02/满二叉树.png)

#### 平衡二叉树

平衡二叉树又被称为AVL树（区别于AVL算法），它是一棵二叉排序树，且具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。

![平衡二叉树](/my-blog/img/2019/03/平衡二叉树.png)

#### 二分查找树

二分搜索树也是二叉树，拥有二叉树的特性。

但是区别在于二分搜索树**每个节点的值都比它的左子树的值大，比右子树的值小**。

这种存储方式很适合于数据搜索。

如下图所示，当需要查找 6 的时候，因为需要查找的值比根节点的值大，所以只需要在根节点的右子树上寻找，大大提高了搜索效率。

```
    5
   / \
  2   6
 / \   \
1   4   7
   /
  3
```


### 实现一个二分查找树

```typescript
class Node {
  value: any;
  left?: any;
  right?: any;
  constructor(value: any) {
    this.value = value
    this.left = null
    this.right = null
  }
}
class BST {
  root: Node;
  size: number;
  constructor() {
    this.root = null
    this.size = 0
  }
  getSize() {
    return this.size;
  }
  isEmpty() {
    return this.size === 0;
  }
  addNode(v) {
    this.root = this._addChild(this.root, v);
  }
  // 添加节点时，需要比较添加的节点值和当前节点值的大小
  // 如果 小于当前节点值，则安排到左边，
  // 如果 大于当前节点值，则安排到右边
  private addChild(root: Node, v: any) {
    if (!root) {
       this.size ++;
       return new Vnode(v);
    }
    if (v < root.value) root.left = this.addChild(root.left, v);
    if (v > root.value) root.right = this.addChild(root.right, v);
    return root;
  }

}
```

对于树的遍历来说，有三种遍历方法，分别是**先序遍历、中序遍历、后序遍历**。

三种遍历的区别在于何时访问节点。

在遍历树的过程中，每个节点都会遍历三次，分别是遍历到自己，遍历左子树和遍历右子树。

如果需要实现先序遍历，那么只需要第一次遍历到节点时进行操作即可。


