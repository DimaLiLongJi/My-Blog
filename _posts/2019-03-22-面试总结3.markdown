---
layout:     post
title:      "面试总结2"
subtitle:   "面试总结2"
date:       2019-03-20
author:     "本人"
header-img: "img/2019/summary/js.jpeg"
tags:
    - 面试总结
---

## Index

 - [1. 写 React / Vue 项目时为什么要在组件中写 key，其作用是什么](#1-写-react--vue-项目时为什么要在组件中写-key其作用是什么)
 - [2. React中setState什么时候是同步的，什么时候是异步的？](#2-React中setState什么时候是同步的，什么时候是异步的？)
 - [3. reactDiff与vueDiff的区别](#3-reactDiff与vueDiff的区别)
 - [4. vue组件通信的几种方法](#4-vue组件通信的几种方法)
 - [5. react组件通信的几种方法](#5-react组件通信的几种方法)
 - [6. 调用 setState 之后发生了什么](#6-调用setState之后发生了什么)
 - [7. 类似于下面的Twitter元素类定义是什么样](#7-类似于下面的Twitter元素类定义是什么样)
 - [8. ControlledComponent与UncontrolledComponent之间的区别是什么](#8-ControlledComponent与UncontrolledComponent之间的区别是什么)
 - [9. 在生命周期中的哪一步你应该发起请求](#9-在生命周期中的哪一步你应该发起请求)
 - [10. 描述事件在React中的处理方式](#10-描述事件在React中的处理方式)
 - [11. redux处理的流程](#11-redux处理的流程)


### 1. 写 React / Vue 项目时为什么要在组件中写 key，其作用是什么

[vue diff](https://github.com/vuejs/vue/blob/dev/src/core/vdom/patch.js#L424)

`vue` 和 `react` 都是采用 `diff` 算法来对比新旧虚拟节点，从而更新节点。在 `vue` 的 `diff` 函数中。可以先了解一下 `diff`算法。

在交叉对比的时候，当新节点跟旧节点头尾交叉对比没有结果的时候，会根据新节点的 `key` 去对比旧节点数组中的 `key` ，从而找到相应旧节点（这里对应的是一个 `key` => `index` 的 `map` 映射）。

如果没找到就认为是一个新增节点。

而如果没有 `key`，那么就会采用一种遍历查找的方式去找到对应的旧节点。

一种一个 `map` 映射，另一种是遍历查找。相比而言。`map` 映射的速度更快。

### 2. React中setState什么时候是同步的，什么时候是异步的？

[参考](https://github.com/sisterAn/blog/issues/26)

先说结论：

1. 在**生命周期中都是异步的**
2. 在 `react` 合成事件中都是异步的
3. 在 `setTimeout` 等异步处理中是同步的
4. 通过 `DOM.addEventListener` 绑定的事件中是同步的

原因：核心**`isBatchingUpdates: boolean`** `true` 为异步进队列 `false` 同步更新

[源码](https://github.com/facebook/react/blob/35962a00084382b49d1f9e3bd36612925f360e5b/src/renderers/shared/reconciler/ReactUpdates.js#L199)

1. react 通过 **队列机制合并 `state`**
2. 会根据一个变量 `isBatchingUpdates` 判断是直接更新 `this.state` 还是放到队列中回头再说，而 `isBatchingUpdates` 默认是 `false`，`setState` 会同步更新 `this.state`
3. 但是，有一个函数 `batchedUpdates`，这个函数会把 `isBatchingUpdates` 修改为 `true` .而当 `React` 在调用事件处理函数或生命周期之前就会调用这个 `batchedUpdates` 造成的后果，就是由 `React` 控制的事件处理过程 `setState` 不会同步更新 `this.state`。
4. 当执行 `setState` 时，如果 `isBatchingUpdates === true` 把更新的 `state` 前合并后放入更新队列，而不会立即更新
5. 直接修改 `state` 的值，则不会放入队列，当下次 `setState` 时，之前对 `state` 的修改可能会被忽略**在 typescript 中，`state` 的类型是 `ReadOnly`，所以你想改也改不了**
6. 当调用 `setState` 时，实际上是会执行 `enqueueSetState` 方法，并会对 `partialState` 及 `_pendingStateQueue` 队列进行合并操作，最终通过 `enqueueUpdate` 执行 `state` 更新
7. 所以 不是通过 react 封装的浏览器原生事件或是计时器，会导致 `isBatchingUpdates === false` ，同步渲染发生
8. **最后 如果生命周期，合成事件，`isBatchingUpdates` 为 true，会推进队列**

### 3. reactDiff与vueDiff的区别

相同点：

1. 都只 diff 同级的 虚拟DOM
2. 优先匹配 key 与 tagname 相同的 element

不同：

- vue 
1. 采用 [snabbdom](https://github.com/snabbdom/snabbdom) 库，同级diff时设置4个index: `oldStartIndex, oldEndIndex, newStartIndex, newEndIndex,`遍历长度为最长的那条 vnodes
2. 然后生成一个 index-key 的表，`key:index, value: key`
3. 首先判断 `oldVnodes[oldStartIndex] === newVnodes[newStartIndex],oldVnodes[oldStartIndex] === newVnodes[newEndIndex],oldVnodes[oldEndIndex] === newVnodes[newStartIndex],oldVnodes[oldEndIndex] === newVnodes[newEndIndex]`
4. 然后判断 key 都不符合判断 `oldTagName === newTagName, oldKey === newKey`
5. 都没有则为新创建的
6. 最后当 `oldStartIndex > oldEndIndex` 或者 `newEndIndex > newStartIndex` 的时候停止遍历
7. 最后移出剩余的 old 或新增 new

- react 
1. 采用2次遍历, 匹配 key和tagName 相同的
2. 优先遍历 new 计算出哪些需要插入或创建的
3. 然后遍历 old 计算出哪些需要删除的

### 4. vue组件通信的几种方法

1. `prop` 和 `$emit`
2. 组件的 `v-model` => `props: value` `$emit('input')`
3. `$ref` 获得某个子组件实例
4. `Vuex`
5. `eventBus` 引入一个 `new Vue()`，所有组件都在上面订阅发布事件
6. `$attrs` 和 `$listeners`
7. `$provide` 和 `$inject`：允许一个祖先组件向其所有子孙后代注入一个依赖
8. `$parent` 和 `$children` 获取父组件和子组件实例

### 5. react组件通信的几种方法

1. `props` 传递组件和回调函数
2. context：父组件 => `childContextTypes` 和 `getChildContext`; 子组件 => `this.context`
3. Redux

### 6. 调用setState之后发生了什么

1. 在代码中调用 `setState` 函数之后，React 会将传入的参数对象与组件当前的状态合并
2. 触发所谓的调和过程（Reconciliation）。经过调和过程，React 会以相对高效的方式根据新的状态构建 React 元素树并且着手重新渲染整个 UI 界面
3. 在 React 得到元素树之后，React 会自动计算出新的树与老树的节点差异，然后根据差异对界面进行最小化重渲染。
4. 在差异计算算法中，React 能够相对精确地知道哪些位置发生了改变以及应该如何改变，这就保证了按需更新，而不是全部重新渲染。

### 7. 类似于下面的Twitter元素类定义是什么样

```jsx
<Twitter username='tylermcginnis33'>
  {(user) => user === null
    ? <Loading />
    : <Badge info={user} />}
</Twitter>
```

```jsx
import React, { Component, PropTypes } from 'react'
import fetchUser from 'twitter'
class Twitter extends Component {
  state = {
    user: null,
  }
  static propTypes = {
    username: PropTypes.string.isRequired,
  }
  componentDidMount () {
    fetchUser(this.props.username)
      .then((user) => this.setState({user}))
  }
  render () {
    return this.props.children(this.state.user)
  }
}
```

### 8. ControlledComponent与UncontrolledComponent之间的区别是什么

- Controlled Component：受控组件指的是将状态交由react内部维护的组件，例如 `<input value={this.state.value} onChange={(e) => this.change(e)} />`
- Uncontrolled Component：非受控组件指的是由html自己维护状态，并通过`ref`来获取DOM的组件 `<input ref={(ref) => this.ref = ref} />`

### 9. 在生命周期中的哪一步你应该发起请求

`componentDidMount`

1. 下一代 fiber 架构将**异步渲染并使用单向链**表实现 vnode，分段式render将多次触发 `componentWillMount`
2. 在生命周期的其他函数中，我们并不能保证请求仅在组件挂载完毕后才会响应。如果我们的数据请求在**组件挂载之前**就完成，并且调用了**setState函数将数据添加到组件状态中，对于未挂载的组件则会报错**

### 10. 描述事件在React中的处理方式

为了解决跨浏览器兼容性问题，React 中的事件处理程序将传递 `SyntheticEvent` 的实例，它是 React 的浏览器本机事件的跨浏览器包装器。

这些 `SyntheticEvent` 与原生事件具有相同的接口，除了它们在所有浏览器中都兼容。

有趣的是，React 实际上并没有将事件附加到子节点本身。**React 将使用单个事件监听器监听顶层的所有事件**。

这对于性能是有好处的，这也意味着在更新 DOM 时，React 不需要担心跟踪事件监听器

### 11. redux处理的流程

redux 是一个应用数据流框架，主要是解决了组件间状态共享的问题，原理是集中式管理。

主要有三个核心方法，`action，store，reducer`。

1. 工作流程是 `view` 调用 `store` 的 `dispatch` 接收 `action` 传入 `store`
2. `reducer` 根据 `action` 返回 新的 `state`
3. `view` 通过 `store` 提供的 `getState` 获取最新的数据


- action

**action 是一个函数或字符串，返回 `{type: string}`**

```typescript
export const DEMO = 'DEMO';
export const demoAction = (status: number): Typings.DemoAction => ({
    type: DEMO,
    url: 'xxxxx', // 中间件
    status,
});
```

- reducer

reducer 是主要变更state的方法，接受2个参数：

1. `stateData：any` 新的部分数据
2. `action: {type: string}` action

**reducer 根据接收到的新状态和action的type作出不同的逻辑返回新的state**

```typescript
const defaultData = {
  status: 1,
};

export default (stateData: Typings.StoreState["demo"] = defaultData, action: Typings.DemoActions): Typings.StoreState["demo"] => {
  switch (action.type) {
  case DEMO:
    return {
      ...stateData,
      status: action.status,
    };
    break;
  default:
    return stateData;
  }
};
```

- 链接组件与store

`@connect(state, dispatch)` 接受 `state` 返回给 `props`，并接受 `dispatch` 返回一个带参数并且返回值为 `dispatch(action(params))` 的方法

```typescript
const mapStateToProps = (state: Typings.StoreState) => ({
  tutor: state.tutor.user,
});

const mapDispatchToProps = (dispatch: Dispatch<Typings.DemoActions>) => ({
  verifyUser: (params: Typings.VerifyParmas) => dispatch(UserActions.verifyUser(params)),
});

@connect(mapStateToProps, mapDispatchToProps)
```





